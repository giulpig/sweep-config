#include <behaviors.dtsi>

// Default layers

#define DEF 0
#define CMK 1
#define NUM 2
#define NAV 3
#define SYM 4
#define FUN 5
#define MOU 6

// AOE2 Layers for in-game shortcuts

#define AOED 7
#define AOEG 8
#define AOEB 9

#include "mouse.dtsi" // self dtsi are pointed with quotes "" instead of <> used to point files from remote
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Customized some default behaviors

&caps_word {
    /delete-property/ ignore-modifiers; // Canceling &caps_word with mods avoids `CMD-SHIFT-S` when I was just trying to type `CMD-S`, since CMD will cancel &caps_word
    continue-list = <UNDERSCORE MINUS SQT CARET TILDE GRAVE K_CANCEL BACKSPACE DELETE LSHFT>; // LSHFT is required to use some diacriticals in PT-BR  (~, ` and ^)
};

&sk {
    release-after-ms = <600000>; // set to a bonkers 10mins default is 1s 1000ms to emulate Callum's QMK config
    quick-release; // avoids "THe"
};

&lt {
    flavor = "balanced";
    hold-trigger-on-release;
};

&mt {
    flavor = "balanced";
    hold-trigger-on-release;
    require-prior-idle-ms = <175>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        defaulf {
            bindings = <
  &kp Q        &kp W  &kp E  &kp R    &kp T       &kp Y      &kp U    &kp I      &kp O    &kp P
  &kp A        &kp S  &kp D  &kp F    &kp G       &kp H      &kp J    &kp K      &kp L    &kp SQT
  &mt GLOBE Z  &kp X  &kp C  &kp V    &kp B       &kp N      &kp M    &kp COMMA  &kp DOT  &kp SEMI
                             &lc NAV  &shft_cw    &kp SPACE  &lc SYM
            >;
        };

        colemak_dh {
            bindings = <
  &kp Q        &kp W  &kp F  &kp P   &kp B     &kp J   &kp L   &kp U      &kp Y    &kp SQT
  &kp A        &kp R  &kp S  &kp T   &kp G     &kp M   &kp N   &kp E      &kp I    &kp O
  &mt GLOBE X  &kp C  &kp D  &kp V   &kp Z     &kp K   &kp H   &kp COMMA  &kp DOT  &kp SEMI
                             &trans  &trans    &trans  &trans
            >;
        };

        numpad {
            bindings = <
  &kp TAB      &kp N7  &kp N8  &kp N9  &kp BACKSPACE    &trans  &trans    &trans     &trans    &trans
  &kp N0       &kp N4  &kp N5  &kp N6  &kp ENTER        &trans  &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp LS(TAB)  &kp N1  &kp N2  &kp N3  &kp DELETE       &trans  &trans    &trans     &trans    &trans
                               &trans  &trans           &trans  &trans
            >;
        };

        navigation_and_media_layer {
            bindings = <
  &kp TAB          &swapper   &kp LS(LC(TAB))  &kp LC(TAB)  &kp C_VOL_UP     &kp PG_UP              &kp HOME      &kp UP        &kp END    &kp BSPC
  &sk LCTRL        &sk LALT   &sk LSHFT        &sk LCMD     &kp C_VOL_DN     &kp PG_DN              &kp LEFT      &kp DOWN      &kp RIGHT  &kp ENTER
  &mt GLOBE LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &playnextprev    &kp RA(RC(RG(LS(J))))  &kp LG(LBKT)  &kp LG(RBKT)  &homerow   &kp DEL
                                               &trans       &trans           &trans                 &trans
            >;
        };

        symbols_layer {
            bindings = <
  &kp ESC    &kp LBRC   &kp LBKT   &kp LPAR   &kp TILDE    &kp CARET   &kp RPAR  &kp RBKT   &kp RBRC   &kp GRAVE
  &kp MINUS  &kp ASTRK  &kp EQUAL  &kp UNDER  &kp DLLR     &kp HASH    &sk RGUI  &sk LSHFT  &sk RALT   &sk RCTRL
  &kp PLUS   &kp PIPE   &kp AT     &kp FSLH   &kp PRCNT    &kp RA(N6)  &kp BSLH  &kp AMPS   &kp QMARK  &kp EXCL
                                   &trans     &trans       &trans      &trans
            >;
        };

        function_and_number_row {
            bindings = <
  &kp N1     &kp N2    &kp N3     &kp N4    &kp N5     &kp N6   &kp N7    &kp N8     &kp N9    &kp N0
  &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11    &kp F12  &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp F1     &kp F2    &kp F3     &kp F4    &kp F5     &kp F6   &kp F7    &kp F8     &kp F9    &kp F10
                                  &trans    &trans     &trans   &trans
            >;
        };

        mouse {
            bindings = <
  &kp TAB                                     &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &kp LC(LS(TAB))  &kp LC(TAB)  &trans    &mwh SCROLL_DOWN  &mwh SCROLL_RIGHT  &mmv MOVE_UP    &mwh SCROLL_LEFT  &kp BSPC
  &kp LCTRL                                   &kp LALT                           &kp LSHFT        &kp LCMD     &trans    &mwh SCROLL_UP    &mmv MOVE_LEFT     &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &kp ENTER
  &mt C_AC_NEXT_KEYBOARD_LAYOUT_SELECT LG(Z)  &kp LG(X)                          &kp LG(C)        &kp LG(V)    &trans    &kp SPACE         &mkp MB3           &mkp MB4        &mkp MB5          &kp ESCAPE
                                                                                                  &trans       &trans    &mkp MB1          &mkp MB2
            >;
        };

        aoe_default_layer {
            bindings = <
  &kp Q        &kp W       &kp E        &kp R        &kp T             &trans  &trans  &trans  &trans  &trans
  &mt LCTRL A  &mt LALT S  &mt LSHFT D  &mt LCTRL F  &kp G             &trans  &trans  &trans  &trans  &trans
  &kp Z        &kp X       &kp C        &kp V        &kp B             &trans  &trans  &trans  &trans  &trans
                                        &lt AOEG H   &lt AOEB SPACE    &trans  &trans
            >;
        };

        aoe_unit_and_group_selection {
            bindings = <
  &kp ESC       &kp N7       &kp N8              &kp N9        &kp DEL        &trans  &trans  &trans  &trans  &trans
  &mt LCTRL N2  &mt LALT N3  &mt LSHFT NUMBER_4  &mt LCTRL N5  &kp N6         &trans  &trans  &trans  &trans  &trans
  &kp SPACE     &kp COMMA    &kp LS(COMMA)       &kp DOT       &kp LS(DOT)    &trans  &trans  &trans  &trans  &trans
                                                 &trans        &trans         &trans  &trans
            >;
        };

        aoe_select_all_buildings {
            bindings = <
  &kp LC(LS(M))  &kp LC(LS(S))  &kp LC(LS(U))  &kp LC(LS(Y))  &kp LC(LS(D))    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(A))  &kp LC(LS(L))  &kp LC(LS(B))  &kp LC(LS(K))  &kp LC(LS(H))    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(Z))  &kp LC(LS(I))  &kp LC(LS(G))  &kp LC(LS(V))  &kp LC(LS(H))    &trans  &trans  &trans  &trans  &trans
                                               &trans         &trans           &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <SYM NAV>;
            then-layer = <FUN>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // DEF combos only use thumbs to avoid accidental presses when typing alphas

        all_toggle_nav {
            key-positions = <30 31>;
            bindings = <&tog NAV>;
        };

        all_numword {
            key-positions = <32 33>;
            bindings = <&numword>;
        };

        all_left_enter {
            bindings = <&kp ENTER>;
            key-positions = <24 30>;
        };

        all_spotlight {
            bindings = <&kp RG(SPACE)>;
            key-positions = <25 33>;
        };

        all_capslock {
            bindings = <&kp CAPS>;
            key-positions = <24 31>;
        };

        all_toggle_numpad {
            bindings = <&tog NUM>;
            key-positions = <25 32>;
        };

        // NAV combos allow for using right side keys with the left hand only, making easier to use a mouse on the right side for edits

        nav_mute {
            key-positions = <4 14>;
            layers = <3>;
            bindings = <&kp C_MUTE>;
        };

        nav_left_backspace {
            key-positions = <22 23>;
            layers = <3>;
            bindings = <&kp BSPC>;
        };

        nav_esc {
            key-positions = <0 1>;
            layers = <3 0>;
            bindings = <&kp ESC>;
        };

        nav_mouse {
            key-positions = <6 7 8>;
            layers = <3 6>;
            bindings = <&tog MOU>;
        };

        // SYS layer was replaced by combos from FUN, needed to pairing and flashing the keyboard

        sys_bootloader {
            key-positions = <20 21>;
            layers = <5>;
            bindings = <&bootloader>;
        };

        sys_toggle_bt0_connection {
            key-positions = <3 4>;
            layers = <5>;
            bindings = <&bt BT_SEL 0>;
        };

        sys_toggle_bt1_connection {
            key-positions = <13 14>;
            layers = <5>;
            bindings = <&bt BT_SEL 1>;
        };

        sys_toggle_bt2_connection {
            key-positions = <23 24>;
            layers = <5>;
            bindings = <&bt BT_SEL 2>;
        };

        sys_clear_current_bluetooth_profile {
            key-positions = <28 29>;
            layers = <5>;
            bindings = <&bt BT_CLR>;
        };

        sys_toggle_colemak {
            bindings = <&tog CMK>;
            layers = <5>;
            key-positions = <10 13 16 19>;
        };

        // AOE layer combos

        aoe_toggle_aoe_layers {
            bindings = <&tog 7>;
            key-positions = <1 2 3>;
            layers = <0 7>;
        };

        aoe_pause {
            bindings = <&kp F3>;
            key-positions = <21 22 23>;
            layers = <7>;
        };
    };

    behaviors {
        shft_cw: shift_and_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RSHFT>, <&caps_word>;
        };

        homerow: homerow_app_tap_search {
            compatible = "zmk,behavior-tap-dance";
            label = "HOMEROW_TAP_AND_SEARCH";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(SPACE))>, <&kp LG(LS(LA(LC(F))))>;
        };

        playnextprev: next_previous_song {
            compatible = "zmk,behavior-tap-dance";
            label = "NEXT-PREVIOUS";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;

            ignored-key-positions = <0 3 7 9 16 17 18 28 29>; // Tab, Shift, Arrow key positions and DEL/BSPC to quit app/close window from altTab
        };

        numword: numword {
            compatible = "zmk,behavior-caps-word"; // Custom caps-word (PR #1451)
            label = "NUM_WORD_SMART_LAYER";
            #binding-cells = <0>;
            layers = <NUM>;
            continue-list = <BACKSPACE DELETE DOT COMMA SEMI LSHFT COLON SLASH PLUS MINUS ASTRK EQUAL K_CANCEL RGUI RALT RCTRL>; // RSHFT tap on left thumb will cancel without entering any other character
            ignore-numbers;
        };
    };

    macros {
        lc: mo_layer_with_embeded_cancel_for_clearing_queued_sticky_mods_on_key_press {
            label = "LAYER_CANCEL";
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };
};
