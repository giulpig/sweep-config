#include <behaviors.dtsi>
#include "mouse.dtsi" // mouse stuff adapted from urob's MOUSE layer. Note to self: self .dtsi files are pointed with quotes "" instead of <> used to point files from remote ZMK
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&caps_word {
    /delete-property/ ignore-modifiers; // Canceling &caps_word with mods avoids `CMD-SHIFT-S` when I was just trying to type `CMD-S`, since CMD will cancel &caps_word
    continue-list = <UNDERSCORE MINUS SQT CARET TILDE GRAVE K_CANCEL BACKSPACE DELETE LSHFT>; // LSHFT is required to use some diacriticals in PT-BR  (~, ` and ^). This makes RSHFT a better candidate for my thumb key
};

&sk {
    release-after-ms = <600000>; // set to a bonkers 10mins default is 1s 1000ms to emulate Callum's QMK config
    quick-release; // avoids "THe"
};

&lt {
    flavor = "balanced";
    hold-trigger-on-release;
};

&mt {
    flavor = "balanced";
    hold-trigger-on-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        toggle_nav {
            key-positions = <30 31>;
            bindings = <&to 3>;
        };

        numword {
            key-positions = <32 33>;
            bindings = <&numword>;
        };

        smart_mouse {
            key-positions = <26 27 28>;
            bindings = <&smart_mouse>;
        };

        nav_mute {
            key-positions = <4 14>;
            layers = <3>;
            bindings = <&kp C_MUTE>;
        };

        // SYS layer was replaced by some combos from FUN

        sys_bootloader {
            key-positions = <20 21>;
            layers = <5>;
            bindings = <&bootloader>;
        };

        sys_toggle_bt0_connection {
            key-positions = <3 4>;
            layers = <5>;
            bindings = <&bt BT_SEL 0>;
        };

        sys_toggle_bt1_connection {
            key-positions = <13 14>;
            layers = <5>;
            bindings = <&bt BT_SEL 1>;
        };

        sys_toggle_bt2_connection {
            key-positions = <23 24>;
            layers = <5>;
            bindings = <&bt BT_SEL 2>;
        };

        sys_clear_current_bluetooth_profile {
            key-positions = <28 29>;
            layers = <5>;
            bindings = <&bt BT_CLR>;
        };

        // AOE layer combos

        aoe_toggle_aoe_layers {
            bindings = <&tog 7>;
            key-positions = <1 2 3>;
            layers = <0 7>;
        };

        aoe_pause {
            bindings = <&kp F3>;
            key-positions = <21 22 23>;
            layers = <7>;
        };

        // Experimienting, back again with homerow mods

        toggle_home_row_mods_on_off_on_default_layer {
            key-positions = <10 19>;
            layers = <5>;
            bindings = <&tog 1>;
        };
    };

    behaviors {
        shft_cw: shift_and_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RSHFT>, <&caps_word>;
        };

        playnextprev: next_previous_song {
            compatible = "zmk,behavior-tap-dance";
            label = "NEXT-PREVIOUS";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;

            tapping-term-ms = <300>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;

            ignored-key-positions = <0 3 7 9 16 17 18 28 29>; // Tab, Shift, Arrow key positions and DEL/BSPC to quit app/close window from altTab
        };

        smart_mouse: smart_mouse {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            label = "SMART_MOUSE";
            #binding-cells = <0>;
            bindings = <&tog 6>, <&none>, <&tog 6>;

            ignored-layers = <6>;
            ignored-key-positions = <7 16 17 18 5 15 6 8 32 33 26 27 28 10 11 12 13 20 21 22 23 1>;
        };

        numword: numword {
            compatible = "zmk,behavior-caps-word"; // Custom caps-word (PR #1451)
            label = "NUM_WORD_SMART_LAYER";
            #binding-cells = <0>;
            layers = <2>;
            continue-list = <BACKSPACE DELETE DOT COMMA SEMI LSHFT COLON SLASH PLUS MINUS ASTRK EQUAL K_CANCEL RGUI RALT RCTRL>; // RSHFT tap on left thumb will cancel without entering any other character
            ignore-numbers;
        };

        lc_nw: numword_on_press_lc_sym_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "NUM_WORD_LC_SYM";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            bindings = <&lc>, <&numword>;
        };

        hrml: hrml {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        hrmr: hrmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        hpmt: hpmt {
            compatible = "zmk,behavior-hold-tap";
            label = "HPMT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
        };

        tpmt: tpmt {
            compatible = "zmk,behavior-hold-tap";
            label = "TPMT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        hplc: hplc {
            compatible = "zmk,behavior-hold-tap";
            label = "HPLC";
            bindings = <&lc>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
        };
    };

    macros {
        lc: mo_layer_with_embeded_cancel_for_clearing_queued_sticky_mods_on_key_press {
            label = "LAYER_CANCEL";
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <4 3>;
            then-layer = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
  &kp Q        &kp W  &kp E  &kp R  &kp T       &kp Y      &kp U       &kp I      &kp O    &kp P
  &kp A        &kp S  &kp D  &kp F  &kp G       &kp H      &kp J       &kp K      &kp L    &kp SQT
  &mt GLOBE Z  &kp X  &kp C  &kp V  &kp B       &kp N      &kp M       &kp COMMA  &kp DOT  &kp SEMI
                             &lc 3  &shft_cw    &kp SPACE  &lc_nw 4 0
            >;
        };

        urob_style_home_row_mods {
            bindings = <
  &kp Q          &kp W         &kp E          &kp R         &kp T                &kp Y               &kp U         &kp I          &kp O         &kp P
  &hrml LCTRL A  &hrml LALT S  &hrml LSHFT D  &hrml LGUI F  &kp G                &kp H               &hrmr RGUI J  &hrmr LSHFT K  &hrmr RALT L  &hrmr RCTRL SQT
  &hrml GLOBE Z  &kp X         &kp C          &kp V         &kp B                &kp N               &kp M         &kp COMMA      &kp DOT       &hrmr GLOBE SEMI
                                              &hplc 3 TAB   &hpmt RSHFT ENTER    &tpmt ESCAPE SPACE  &hplc 4 BSPC
            >;
        };

        numpad {
            bindings = <
  &kp TAB      &kp N7  &kp N8  &kp N9    &kp BACKSPACE    &trans  &trans    &trans     &trans    &trans
  &kp N0       &kp N4  &kp N5  &kp N6    &kp ENTER        &trans  &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp LS(TAB)  &kp N1  &kp N2  &kp N3    &kp DELETE       &trans  &trans    &trans     &trans    &trans
                               &lt 3 N0  &trans           &trans  &trans
            >;
        };

        navigation_and_media_layer {
            bindings = <
  &kp TAB          &swapper   &kp LS(LC(TAB))  &kp LC(TAB)  &kp C_VOL_UP     &kp PG_UP   &kp HOME      &kp UP        &kp END            &kp BSPC
  &sk LCTRL        &sk LALT   &sk LSHFT        &sk LCMD     &kp C_VOL_DN     &kp PG_DN   &kp LEFT      &kp DOWN      &kp RIGHT          &kp ENTER
  &mt GLOBE LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &playnextprev    &caps_word  &kp LG(LBKT)  &kp LG(RBKT)  &kp LG(LS(SPACE))  &kp DEL
                                               &lc 3        &trans           &trans      &lc 4
            >;
        };

        symbols_layer {
            bindings = <
  &kp ESC    &kp LBRC   &kp LBKT   &kp LPAR   &kp TILDE    &kp CARET   &kp RPAR  &kp RBKT   &kp RBRC   &kp GRAVE
  &kp MINUS  &kp ASTRK  &kp EQUAL  &kp UNDER  &kp DLLR     &kp HASH    &sk RGUI  &sk LSHFT  &sk RALT   &sk RCTRL
  &kp PLUS   &kp PIPE   &kp AT     &kp FSLH   &kp PRCNT    &kp RA(N6)  &kp BSLH  &kp AMPS   &kp QMARK  &kp EXCL
                                   &lc 3      &trans       &trans      &lc 4
            >;
        };

        function_and_number_row {
            bindings = <
  &kp N1     &kp N2    &kp N3     &kp N4    &kp N5     &kp N6   &kp N7    &kp N8     &kp N9    &kp N0
  &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11    &kp F12  &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp F1     &kp F2    &kp F3     &kp F4    &kp F5     &kp F6   &kp F7    &kp F8     &kp F9    &kp F10
                                  &trans    &trans     &trans   &trans
            >;
        };

        mouse {
            bindings = <
  &trans     &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &trans     &trans     &trans    &mwh SCROLL_DOWN  &mwh SCROLL_RIGHT  &mmv MOVE_UP    &mwh SCROLL_LEFT  &trans
  &kp LCTRL  &kp LALT                           &kp LSHFT  &kp LCMD   &trans    &mwh SCROLL_UP    &mmv MOVE_LEFT     &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &trans
  &kp LG(Z)  &kp LG(X)                          &kp LG(C)  &kp LG(V)  &trans    &tog 6            &mkp MB3           &mkp MB4        &mkp MB5          &trans
                                                           &trans     &trans    &mkp MB1          &mkp MB2
            >;
        };

        aoe_default_layer {
            bindings = <
  &kp Q        &kp W       &kp E        &kp R        &kp T          &trans  &trans  &trans  &trans  &trans
  &mt LCTRL A  &mt LALT S  &mt LSHFT D  &mt LCTRL F  &kp G          &trans  &trans  &trans  &trans  &trans
  &kp Z        &kp X       &kp C        &kp V        &kp B          &trans  &trans  &trans  &trans  &trans
                                        &lt 8 H      &lt 9 SPACE    &trans  &trans
            >;
        };

        aoe_unit_and_group_selection {
            bindings = <
  &kp ESC       &kp N7       &kp N8         &kp N9        &kp DEL        &trans  &trans  &trans  &trans  &trans
  &mt LCTRL N2  &mt LALT N3  &mt LSHFT N4   &mt LCTRL N5  &kp N6         &trans  &trans  &trans  &trans  &trans
  &kp SPACE     &kp COMMA    &kp LS(COMMA)  &kp DOT       &kp LS(DOT)    &trans  &trans  &trans  &trans  &trans
                                            &trans        &trans         &trans  &trans
            >;
        };

        aoe_select_all_buildings {
            bindings = <
  &kp LC(LS(M))  &kp LC(LS(S))  &kp LC(LS(U))  &kp LC(LS(Y))  &kp LC(LS(D))    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(A))  &kp LC(LS(L))  &kp LC(LS(B))  &kp LC(LS(K))  &kp LC(LS(H))    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(Z))  &kp LC(LS(I))  &kp LC(LS(G))  &kp LC(LS(V))  &kp LC(LS(H))    &trans  &trans  &trans  &trans  &trans
                                               &trans         &trans           &trans  &trans
            >;
        };
    };
};
