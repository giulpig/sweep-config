#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&caps_word {
    continue-list = <UNDERSCORE MINUS SQT CARET TILDE GRAVE K_CANCEL BACKSPACE DELETE>;
};

&mt {
    flavor = "tap-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";

        // macOS combos

        combo_spotlight_alfred {
            key-positions = <13 16>;// F J
            layers = <0>;
            bindings = <&kp LG(SPC)>;
        };

        combo_enter_on_jk {
            key-positions = <16 17>;// J K
            layers = <0 5>;
            bindings = <&kp ENTER>;
        };

        combo_shortcat {
            key-positions = <27 26>;// M ,
            layers = <0>;
            bindings = <&kp LG(LS(SPC))>;
        };

        combo_toggle_nav {
            key-positions = <30 31>;
            layers = <0 2>;
            bindings = <&tog 2>;
        };

        combo_apple_numpad {
            bindings = <&tog 1>;
            key-positions = <32 33>;
            layers = <0 1>;
        };

        // Windows combos

        combo_toggle_between_windows_and_apple_mods {
            key-positions = <10 19>;// A "
            layers = <4 8>;
            bindings = <&tog 5>;
        };

        combo_windows_start_menu {
            key-positions = <13 16>;// F J
            layers = <5>;// Only available in the Windows' DEF layer
            bindings = <&kp LGUI>;
        };

        combo_toggle_wnav {
            key-positions = <30 31>;
            layers = <5 6>;
            bindings = <&tog 6>;
        };

        combo_windows_numpad {
            bindings = <&tog 6>;
            key-positions = <32 33>;
            layers = <5 6>;
        };

        // Multimedia and keyboard features (OS agnostic)

        combo_comma_on_numpad {
            bindings = <&kp KP_COMMA>;
            key-positions = <29 39 19>;
            layers = <6 1>;
        };

        combo_mute {
            key-positions = <4 14>;// Vol up + down keys
            layers = <2 6>;// Only available in the NAV layer, system agnostic
            bindings = <&kp C_MUTE>;
        };

        combo_trigger_bootloader {
            key-positions = <20 21>;
            layers = <4>;
            bindings = <&bootloader>;
        };

        combo_toggle_bt0_connection {
            key-positions = <3 4>;
            layers = <4>;
            bindings = <&bt BT_SEL 0>;
        };

        combo_toggle_bt1_connection {
            key-positions = <13 14>;
            layers = <4>;
            bindings = <&bt BT_SEL 1>;
        };

        combo_toggle_bt2_connection {
            key-positions = <23 24>;
            layers = <4>;
            bindings = <&bt BT_SEL 2>;
        };

        combo_clear_current_bluetooth_profile {
            key-positions = <28 29>;
            layers = <4>;
            bindings = <&bt BT_CLR>;
        };

        // AOE layers

        toggle_aoe {
            bindings = <&tog 9>;
            key-positions = <1 2 3>;
            layers = <0 9>;
        };

        aoe_pause {
            bindings = <&kp F3>;
            key-positions = <21 22 23>;
            layers = <10>;
        };
    };

    behaviors {
        shift_cw: tap_dance_shift_and_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp LSHFT>,
                <&caps_word>;
        };
        playnextprev: playnextprev {
            compatible = "zmk,behavior-tap-dance";
            label = "PLAYNEXTPREV";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings =
                <&kp C_PLAY_PAUSE>,
                <&kp C_NEXT>,
                <&kp C_PREVIOUS>;
        };
        swapper: swapper {
            compatible = "zmk,behavior-tri-state";// requires tri-state PR #1366 (not yet merged into main)
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings =
                <&kt LCMD>,
                <&kp TAB>,
                <&kt LCMD>;

            ignored-key-positions = <0 3 7 9 16 17 18 28 29>;// Tab, Shift, Arrow key positions and DEL/BSPC to quit app/close window from altTab
        };
        wswapper: windows_swapper {
            compatible = "zmk,behavior-tri-state";// requires tri-state PR #1366 (not yet merged into main)
            label = "WINDOWS_SWAPPER";
            #binding-cells = <0>;
            bindings =
                <&kt LALT>,
                <&kp TAB>,
                <&kt LALT>;

            ignored-key-positions = <3>;// Shift key on WNAV to allow for backwards movement
        };
    };

    macros {
        lc_nav: lc_nav {
            label = "LC_NAV";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2>,
                <&macro_tap>,
                <&kp K_CANCEL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2>;
        };
        lc_sym: lc_sym {
            label = "LC_SYM";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 3>,
                <&macro_tap>,
                <&kp K_CANCEL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 3>;
        };
        lc_wnav: lc_wnav {
            label = "LC_WNAV";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 6>,
                <&macro_tap>,
                <&kp K_CANCEL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 6>;
        };
        lc_wsym: lc_wsym {
            label = "LC_WSYM";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 7>,
                <&macro_tap>,
                <&kp K_CANCEL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 7>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        macos_tri_layer {
            if-layers = <2 3>;
            then-layer = <4>;
        };

        windows_tri_layer {
            if-layers = <6 7>;
            then-layer = <8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        apple_default_layer {
            bindings = <
&kp Q       &kp W  &kp E  &kp R    &kp T        &kp Y      &kp U    &kp I      &kp O    &kp P
&kp A       &kp S  &kp D  &kp F    &kp G        &kp H      &kp J    &kp K      &kp L    &kp SQT
&mt CAPS Z  &kp X  &kp C  &kp V    &kp B        &kp N      &kp M    &kp COMMA  &kp DOT  &kp SEMI
                          &lc_nav  &shift_cw    &kp SPACE  &lc_sym
            >;
        };

        apple_numpad {
            bindings = <
&kp TAB    &trans    &trans     &trans    &trans    &kp KP_SLASH     &kp KP_N7        &kp KP_N8        &kp KP_NUMBER_9  &kp KP_PLUS
&kp RCTRL  &kp RALT  &kp RSHFT  &kp RGUI  &trans    &kp KP_ASTERISK  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_N6        &kp KP_ENTER
&trans     &trans    &trans     &trans    &trans    &kp KP_MINUS     &kp KP_N1        &kp KP_N2        &kp KP_N3        &kp KP_DOT
                                &trans    &trans    &tog 1           &lt 2 KP_N0
            >;
        };

        apple_navigation_and_media_layer {
            bindings = <
&kp TAB         &swapper   &kp LS(LC(TAB))  &kp LC(TAB)  &kp C_VOL_UP     &kp PG_UP     &kp HOME      &kp UP        &kp END        &kp BSPC
&sk LCTRL       &sk LALT   &sk LSHFT        &sk LGUI     &kp C_VOL_DN     &kp PG_DN     &kp LEFT      &kp DOWN      &kp RIGHT      &kp ENTER
&mt CAPS LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &playnextprev    &kp LC(LEFT)  &kp LG(LBKT)  &kp LG(RBKT)  &kp LC(RIGHT)  &kp DEL
                                            &trans       &trans           &trans        &trans
            >;
        };

        apple_symbols_layer {
            bindings = <
&kp ESC    &kp LBRC   &kp LBKT   &kp LPAR   &kp TILDE    &kp CARET   &kp RPAR  &kp RBKT   &kp RBRC   &kp GRAVE
&kp MINUS  &kp ASTRK  &kp EQUAL  &kp UNDER  &kp DLLR     &kp HASH    &sk RGUI  &sk RSHFT  &sk RALT   &sk RCTRL
&kp PLUS   &kp PIPE   &kp AT     &kp FSLH   &kp PRCNT    &kp LA(N6)  &kp BSLH  &kp AMPS   &kp QMARK  &kp EXCL
                                 &trans     &trans       &trans      &trans
            >;
        };

        apple_tri_layer_function_and_number_row {
            bindings = <
&kp N1     &kp N2    &kp N3     &kp N4    &kp N5     &kp N6   &kp N7    &kp N8     &kp N9    &kp N0
&sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11    &kp F12  &sk RGUI  &sk RSHFT  &sk RALT  &sk RCTRL
&kp F1     &kp F2    &kp F3     &kp F4    &kp F5     &kp F6   &kp F7    &kp F8     &kp F9    &kp F10
                                &trans    &trans     &trans   &trans
            >;
        };

        windows_default_layer {
            bindings = <
&kp Q  &kp W  &kp E  &kp R     &kp T        &kp Y    &kp U     &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F     &kp G        &kp H    &kp J     &kp K      &kp L    &kp SQT
&kp Z  &kp X  &kp C  &kp V     &kp B        &kp N    &kp M     &kp COMMA  &kp DOT  &kp SEMI
                     &lc_wnav  &shift_cw    &kp SPC  &lc_wsym
            >;
        };

        windows_numpad {
            bindings = <
&kp TAB   &trans    &trans     &trans     &trans    &kp KP_SLASH     &kp KP_N7        &kp KP_N8        &kp KP_NUMBER_9  &kp KP_PLUS
&kp RGUI  &kp RALT  &kp RSHFT  &kp RCTRL  &trans    &kp KP_ASTERISK  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_N6        &kp KP_ENTER
&trans    &trans    &trans     &trans     &trans    &kp KP_MINUS     &kp KP_N1        &kp KP_N2        &kp KP_N3        &kp KP_DOT
                               &trans     &trans    &tog 1           &lt 7 KP_N0
            >;
        };

        windows_navigation_and_media_layer {
            bindings = <
&kp TAB    &wswapper  &kp LS(LC(TAB))  &kp LC(TAB)  &kp C_VOL_UP     &kp PG_UP               &kp HOME      &kp UP         &kp END            &kp BSPC
&sk LGUI   &sk LALT   &sk LSHFT        &sk LCTRL    &kp C_VOL_DN     &kp PG_DN               &kp LEFT      &kp DOWN       &kp RIGHT          &kp ENTER
&kp LC(Z)  &kp LC(X)  &kp LC(C)        &kp LC(V)    &playnextprev    &kp LG(LC(LEFT_ARROW))  &kp LA(LEFT)  &kp LA(RIGHT)  &kp LG(LC(RIGHT))  &kp DEL
                                       &trans       &trans           &trans                  &trans
            >;
        };

        windows_symbols_layer {
            bindings = <
&kp ESC    &kp LBRC   &kp LBKT   &kp LPAR  &kp TILDE    &kp CARET  &kp RPAR   &kp RBKT   &kp RBRC   &kp GRAVE
&kp MINUS  &kp ASTRK  &kp EQUAL  &kp PLUS  &kp DLLR     &kp HASH   &sk RCTRL  &sk RSHFT  &sk RALT   &sk RGUI
&kp UNDER  &kp PIPE   &kp AT     &kp FSLH  &kp PRCNT    &none      &kp BSLH   &kp AMPS   &kp QMARK  &kp EXCL
                                 &trans    &trans       &trans     &trans
            >;
        };

        windows_tri_layer_function_and_number_row {
            bindings = <
&kp N1    &kp N2    &kp N3     &kp N4     &kp N5     &kp N6   &kp N7     &kp N8     &kp N9    &kp N0
&sk LGUI  &sk LALT  &sk LSHFT  &sk LCTRL  &kp F11    &kp F12  &sk RCTRL  &sk RSHFT  &sk RALT  &sk RGUI
&kp F1    &kp F2    &kp F3     &kp F4     &kp F5     &kp F6   &kp F7     &kp F8     &kp F9    &kp F10
                               &trans     &trans     &trans   &trans
            >;
        };

        aoe_def {
            bindings = <
&kp Q  &kp W       &kp E        &kp R        &kp T         &trans  &trans  &trans  &trans  &trans
&kp A  &mt LALT S  &mt LSHFT D  &mt LCTRL F  &kp G         &trans  &trans  &trans  &trans  &trans
&kp Z  &kp X       &kp C        &kp V        &kp B         &trans  &trans  &trans  &trans  &trans
                                &lt 11 H     &lt 12 ESC    &trans  &trans
            >;
        };

        aoe_group {
            bindings = <
&kp N2      &kp N3      &kp N4      &kp N5      &kp N6             &trans  &trans  &trans  &trans  &trans
&kp N2      &kp N3      &kp N4      &kp N5      &mt LCTRL COMMA    &trans  &trans  &trans  &trans  &trans
&kp LC(N2)  &kp LC(N3)  &kp LC(N4)  &kp LC(N5)  &kp LC(N6)         &trans  &trans  &trans  &trans  &trans
                                    &trans      &kp DEL            &trans  &trans
            >;
        };

        aoe_buildings {
            bindings = <
&kp LC(LS(M))  &kp LC(LS(S))  &kp LC(LS(U))  &kp LC(LS(Y))  &kp LC(LS(D))    &trans  &trans  &trans  &trans  &trans
&kp LC(LS(A))  &kp LC(LS(L))  &kp LC(LS(B))  &kp LC(LS(K))  &kp LS(DOT)      &trans  &trans  &trans  &trans  &trans
&kp LC(LS(Z))  &kp LC(LS(I))  &kp LC(LS(G))  &kp LC(LS(V))  &kp LS(COMMA)    &trans  &trans  &trans  &trans  &trans
                                             &kp LC(LS(H))  &trans           &trans  &trans
            >;

            label = "ABU";
        };
    };
};
