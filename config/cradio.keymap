#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "mouse.dtsi" // mouse stuff adapted from urob's MOUSE layer. Note to self: self .dtsi files are pointed with quotes "" instead of <> used to point files from remote ZMK

#define DEF 0
#define NWD 1
#define NAV 2
#define SYM 3
#define FUN 4
#define MOU 5

#define AOE 6
#define ASG 7
#define ASB 8

&caps_word {
    /delete-property/ ignore-modifiers; // Canceling &caps_word with mods avoids `CMD-SHIFT-S` when I was just trying to type `CMD-S`, since CMD will cancel &caps_word
    continue-list = <UNDERSCORE MINUS SQT CARET TILDE GRAVE K_CANCEL BACKSPACE DELETE LSHFT>; // adding LSHFT is required to use some dead keys for diacriticals in PT-BR  (such as ~, ` and ^). This makes RSHFT a better candidate for my thumb key, as it can cancel &capsword on activation
};

&sk {
    release-after-ms = <600000>; // set to a bonkers 10mins to emulate Callum's QMK config behavior, default is 1s (1000ms)
    quick-release; // avoids "THis" problem
};

&lt { flavor = "hold-preferred"; };

&mt { flavor = "balanced"; };

/ {
    combos {
        compatible = "zmk,combos";

        // Left hand for usage while using the mouse on the right-hand mouse or from AOE layer

        left_hand_esc_combo {
            bindings = <&kp ESCAPE>;
            require-prior-idle-ms = <175>; // Followind urob's formula for my 60 relaxed WPM: 10500/60 = 175
            timeout-ms = <30>;
            layers = <DEF AOE>;
            key-positions = <0 10>;
        };

        left_hand_tab_combo {
            bindings = <&kp TAB>;
            require-prior-idle-ms = <175>;
            timeout-ms = <30>;
            layers = <DEF NAV AOE>;
            key-positions = <1 11>;
        };

        left_hand_backspace_combo {
            bindings = <&kp BSPC>;
            require-prior-idle-ms = <175>;
            timeout-ms = <30>;
            layers = <DEF NAV AOE>;
            key-positions = <2 12>;
        };

        left_hand_enter_combo {
            bindings = <&kp ENTER>;
            require-prior-idle-ms = <175>;
            timeout-ms = <30>;
            layers = <DEF NAV AOE>;
            key-positions = <3 13>;
        };

        left_hand_back_button_combo {
            bindings = <&kp LG(LBKT)>;
            require-prior-idle-ms = <175>;
            timeout-ms = <30>;
            layers = <DEF NAV>;
            key-positions = <12 22>;
        };

        left_hand_forward_button_combo {
            bindings = <&kp LG(RBKT)>;
            require-prior-idle-ms = <175>;
            timeout-ms = <30>;
            layers = <DEF NAV>;
            key-positions = <13 23>;
        };

        left_hand_del_combo {
            bindings = <&kp DEL>;
            require-prior-idle-ms = <175>;
            timeout-ms = <30>;
            layers = <DEF AOE>;
            key-positions = <4 14>;
        };
        
        // Special layer toggles

        nav_media_mute_combo {
            key-positions = <4 14>;
            layers = <NAV>;
            bindings = <&kp C_MUTE>;
        };
        
        toggle_nav_combo {
            key-positions = <30 31>;
            layers = <DEF>;
            bindings = <&tog NAV>;
        };

        numword_combo {
            key-positions = <32 33>;
            layers = <DEF AOE>;
            bindings = <&numword>;
        };
        
        activate_smart_mouse_layer_combo {
            key-positions = <26 27 28>;
            layers = <DEF>;
            bindings = <&smart_mouse>;
        };
        
        aoe_toggle_aoe_gaming_layers {
            bindings = <&tog AOE>;
            layers = <DEF AOE>;
            key-positions = <21 22 23>;
        };

        // Keyboard adjustments combos (replaces a dedicated SYS layer)

        sys_bootloader {
            key-positions = <20 21>;
            layers = <FUN>;
            bindings = <&bootloader>;
        };

        sys_toggle_bt0_connection {
            key-positions = <3 4>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 0>;
        };

        sys_toggle_bt1_connection {
            key-positions = <13 14>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 1>;
        };

        sys_toggle_bt2_connection {
            key-positions = <23 24>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 2>;
        };

        sys_clear_current_bluetooth_profile {
            key-positions = <28 29>;
            layers = <FUN>;
            bindings = <&bt BT_CLR>;
        };
    };

    behaviors {
        shft_cw: shift_and_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&sks RSHFT>, <&caps_word>;
        };
        
        numword: numword {
            compatible = "zmk,behavior-caps-word"; // Custom caps-word (PR #1451)
            label = "NUMWORD_SMART_LAYER";
            #binding-cells = <0>;
            layers = <NWD>;
            continue-list = <BACKSPACE DELETE DOT COMMA SEMI LSHFT COLON SLASH PLUS MINUS ASTRK EQUAL>; // RSHFT tap on left thumb will cancel without entering any other character
            ignore-numbers;
        };
        
        playnextprev: next_previous_song {
            compatible = "zmk,behavior-tap-dance";
            label = "NEXT-PREVIOUS";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;

            tapping-term-ms = <300>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;

            ignored-key-positions = <0 3 7 9 16 17 18 28 29>; // Tab, Shift, Arrow key positions and DEL/BSPC to quit app/close window from altTab
        };

        smart_mouse: smart_mouse {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            label = "SMART_MOUSE";
            #binding-cells = <0>;
            bindings = <&tog MOU>, <&none>, <&tog MOU>;

            ignored-layers = <MOU>;
            ignored-key-positions = <7 16 17 18 5 15 6 8 32 33 26 27 28 10 11 12 13 20 21 22 23 1>; // Every key set in mouse layer
        };

        sllc: sticky_layer_on_tap_lc_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_LAYER_ON_PRESS_LAYER_CANCEL_ON_HOLD";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <175>;
            bindings = <&lc>, <&sl>;
        };
        
        sks: sticky_shift_with_shorter_timeout {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_SHIFT";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <600>;
            quick-release;
        };

    };

    macros {
        lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_press {
            label = "LAYER_CANCEL";
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer_for_function_and_number_keys {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
                
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
  &kp Q        &kp W  &kp E  &kp R    &kp T     &kp Y      &kp U  &kp I      &kp O    &kp P
  &kp A        &kp S  &kp D  &kp F    &kp G     &kp H      &kp J  &kp K      &kp L    &kp SQT
  &mt GLOBE Z  &kp X  &kp C  &kp V    &kp B     &kp N      &kp M  &kp COMMA  &kp DOT  &kp SEMI
                             &sllc NAV NAV  &shft_cw  &kp SPACE  &sllc SYM SYM
            >;
        };

        numword_layer {
            bindings = <
  &kp TAB    &kp N7  &kp N8  &kp N9      &kp SLASH    &trans  &trans  &trans  &trans  &trans
  &kp MINUS  &kp N4  &kp N5  &kp N6      &kp ASTRK    &trans  &trans  &trans  &trans  &trans
  &kp PLUS   &kp N1  &kp N2  &kp N3      &kp COMMA    &trans  &trans  &trans  &trans  &trans
                             &lt NAV N0  &kp DOT      &trans  &trans
            >;
        };

        navigation_and_media_layer {
            bindings = <
  &kp TAB          &swapper   &kp LS(LC(TAB))  &kp LC(TAB)  &kp C_VOL_UP          &kp PG_UP      &kp HOME      &kp UP        &kp END            &kp BSPC
  &sk LCTRL        &sk LALT   &sk LSHFT        &sk LCMD     &kp C_VOL_DN          &kp PG_DN      &kp LEFT      &kp DOWN      &kp RIGHT          &kp ENTER
  &mt GLOBE LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &playnextprev         &kp F18        &kp LG(LBKT)  &kp LG(RBKT)  &kp LG(LS(SPACE))  &kp DEL
                                               &trans       &kp ESC               &trans         &trans
            >;
        };

        symbols_layer {
            bindings = <
  &kp ESC    &kp LBRC   &kp LBKT   &kp LPAR   &kp TILDE                  &kp CARET   &kp RPAR  &kp RBKT   &kp RBRC   &kp GRAVE
  &kp MINUS  &kp ASTRK  &kp EQUAL  &kp UNDER  &kp DLLR                   &kp HASH    &sk RGUI  &sk LSHFT  &sk RALT   &sk RCTRL
  &kp PLUS   &kp PIPE   &kp AT     &kp FSLH   &kp PRCNT                  &kp LA(N6)  &kp BSLH  &kp AMPS   &kp QMARK  &kp EXCL
                                   &trans     &kp LC(LG(SPACE))          &kp CAPS    &trans
            >;
        };

        function_and_number_row {
            bindings = <
  &kp N1     &kp N2    &kp N3     &kp N4    &kp N5     &kp N6   &kp N7    &kp N8     &kp N9    &kp N0
  &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11    &kp F12  &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp F1     &kp F2    &kp F3     &kp F4    &kp F5     &kp F6   &kp F7    &kp F8     &kp F9    &kp F10
                                  &trans    &trans     &trans   &trans
            >;
        };

        mouse {
            bindings = <
  &trans     &trans    &trans     &trans     &trans    &mwh SCROLL_UP    &mwh SCROLL_RIGHT  &mmv MOVE_UP    &mwh SCROLL_LEFT  &trans
  &kp LCTRL  &kp LALT  &kp LSHFT  &kp LCMD   &trans    &mwh SCROLL_DOWN  &mmv MOVE_LEFT     &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &trans
  &trans     &trans    &trans     &trans     &trans    &trans            &mkp MB3           &mkp MB4        &mkp MB5          &trans
                                  &trans     &trans    &mkp MB1          &mkp MB2
            >;
        };

        aoe_default_layer {
            bindings = <
  &kp Q        &kp W       &kp E        &kp R              &kp T         &trans  &trans  &trans  &trans  &trans
  &mt LCTRL A  &mt LALT S  &mt LSHFT D  &mt LCTRL F        &kp G         &trans  &trans  &trans  &trans  &trans
  &kp Z        &kp X       &kp C        &kp V              &kp B         &trans  &trans  &trans  &trans  &trans
                                        &lt ASG LC(LS(H))  &lt ASB DOT   &trans  &trans
            >;
        };

        aoe_unit_and_group_selection {
            bindings = <
  &kp N1        &kp N2       &kp N3         &kp N4        &kp N5     &trans  &trans  &trans  &trans  &trans
  &mt LCTRL N6  &mt LALT N7  &mt LSHFT N8   &mt LCTRL N9  &kp N0     &trans  &trans  &trans  &trans  &trans
  &kp SPACE     &kp COMMA    &kp LS(COMMA)  &kp ENTER     &kp SPACE  &trans  &trans  &trans  &trans  &trans
                                            &trans        &kp F3     &trans  &trans
            >;
        }; 

        aoe_select_all_buildings {
            bindings = <
  &kp LC(LS(M))  &kp LC(LS(S))  &kp LC(LS(U))  &kp LC(LS(Y))  &kp LC(LS(D))    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(A))  &kp LC(LS(L))  &kp LC(LS(B))  &kp LC(LS(K))  &none            &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(Z))  &kp LC(LS(I))  &kp LC(LS(G))  &kp LC(LS(V))  &kp H            &trans  &trans  &trans  &trans  &trans
                                               &kp ESC        &trans           &trans  &trans
            >;
        };
    };

};