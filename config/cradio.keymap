#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1500
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20

&mmv {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <500>;
    delay-ms = <0>;
};

&msc {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <40>;
    delay-ms = <0>;
};

&sk {
    quick-release; // Default releases on key up. This release the mod on key down and avoids "THis" problem
    release-after-ms = <86400000>; // Default is 1000 ms, raised to 1 day to emulate Callum's behavior that requires canceling on layer key.
};

&caps_word {
    /delete-property/ ignore-modifiers; // Canceling &caps_word with mods avoids `CMD-SHIFT-S` when I was just trying to type `CMD-S`, since CMD will cancel &caps_word
    continue-list = <UNDERSCORE MINUS SQT CARET TILDE GRAVE K_CANCEL BACKSPACE DELETE LSHFT>; // LSHFT is needed diacriticals. This makes RSHFT a better thumb key that cancels &caps_word
};

/ {
    combos {
        compatible = "zmk,combos";

        thumb_enter {
            bindings = <&kp ENTER>;
            key-positions = <33 25>;
        };

        thumb_bakcspace {
            bindings = <&kp BSPC>;
            key-positions = <30 24>;
        };

        left_hand_esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <0 10>;
            require-prior-idle-ms = <180>;
            layers = <1 2 5>;
        };

        left_hand_f18_combo {
            bindings = <&kp F18>;   // Handy for using as trigger in Keyboard Maestro for App-Specific macros
            key-positions = <2 12>;
            require-prior-idle-ms = <180>;
            layers = <1 2 5>;
        };

        left_hand_enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <3 13>;
            require-prior-idle-ms = <180>;
            layers = <1 2 5>;
        };

        left_hand_sticky_sym {
            bindings = <&sl 3>;
            key-positions = <1 11>;
            require-prior-idle-ms = <180>;
            layers = <1 2 5>;
        };

        toggle_nav_layer_combo {
            key-positions = <30 31>;
            layers = <0 2>;
            bindings = <&tog 2>;
        };

        toggle_mouse_layer_combo {
            key-positions = <21 22 23>;
            layers = <0 5>;
            bindings = <&tog 5>;
        };

        toggle_numword {
            key-positions = <11 13>;
            layers = <0>;
            bindings = <&numword>;
            require-prior-idle-ms = <180>;
        };

        numword_comma {
            key-positions = <12 22>;
            bindings = <&kp COMMA>;
            require-prior-idle-ms = <180>;
            layers = <1>;
        };

        numword_dot {
            key-positions = <13 23>;
            bindings = <&kp DOT>;
            require-prior-idle-ms = <180>;
            layers = <1>;
        };

        numword_colon {
            key-positions = <14 24>;
            bindings = <&kp COLON>;
            require-prior-idle-ms = <180>;
            layers = <1>;
        };

        nav_media_mute_combo {
            key-positions = <4 14>;
            layers = <2>;
            bindings = <&kp C_MUTE>;
        };

        sys_bootloader {
            key-positions = <20 21>;
            layers = <4>;
            bindings = <&bootloader>;
        };

        sys_connect_to_bt0 {
            key-positions = <3 4>;
            layers = <4>;
            bindings = <&bt BT_SEL 0>;
        };

        sys_connect_to_bt1 {
            key-positions = <13 14>;
            layers = <4>;
            bindings = <&bt BT_SEL 1>;
        };

        sys_connect_to_bt2 {
            key-positions = <23 24>;
            layers = <4>;
            bindings = <&bt BT_SEL 2>;
        };

        sys_clear_current_bluetooth_profile {
            key-positions = <28 29>;
            layers = <4>;
            bindings = <&bt BT_CLR>;
        };
    };

    behaviors {
        playnp: play_next_previous_media {
            compatible = "zmk,behavior-tap-dance";
            label = "PLAY_NEXT_PREVIOUS";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;
        };

        shft_cw: shft_cw {
            compatible = "zmk,behavior-tap-dance";
            label = "SHFT_CW";
            #binding-cells = <0>;
            bindings = <&kp RSHFT>, <&caps_word>;

            tapping-term-ms = <300>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt RGUI>, <&kp TAB>, <&kt RGUI>;

            ignored-key-positions = <0 3 7 9 16 17 18 28 29>;
        };

        numword: numword {
            compatible = "zmk,behavior-caps-word"; // requires moded caps-word implementation from (PR #1451) will not work with vanilla &caps_word parameters
            label = "NUMWORD_SMART_LAYER";
            #binding-cells = <0>;
            layers = <1>;
            continue-list = <LPAR RPAR LBKT RBKT LBRC RBRC TAB DOT COMMA SEMI COLON SLASH PLUS MINUS ASTRK EQUAL BACKSPACE DELETE>;
            ignore-numbers;
            ignore-modifiers;
        };

        ml: ml {
            compatible = "zmk,behavior-hold-tap";
            label = "ML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33>;
            hold-trigger-on-release;
        };
    };

    macros {
        lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_press {
            label = "LAYER_CANCEL";
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        m_hr: from_mouse_layer_to_def_with_homerow_app_activation {
            label = "MOUSE_TO_HOMEROW";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&to 0 &kp LG(LS(SPACE))>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer_for_function_and_number_keys {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_alphas_qwerty {
            bindings = <
  &kp Q        &kp W  &kp E  &kp R  &kp T       &kp Y      &kp U  &kp I      &kp O    &kp P
  &kp A        &kp S  &kp D  &kp F  &kp G       &kp H      &kp J  &kp K      &kp L    &kp APOS
  &ml GLOBE Z  &kp X  &kp C  &kp V  &kp B       &kp N      &kp M  &kp COMMA  &kp DOT  &kp SEMI
                             &lc 2  &shft_cw    &kp SPACE  &lc 3
            >;
        };

        numpad {
            bindings = <
  &trans  &kp N7  &kp N8  &kp N9  &trans    &trans  &trans          &trans  &trans  &trans
  &kp N0  &kp N4  &kp N5  &kp N6  &trans    &trans  &trans          &trans  &trans  &trans
  &trans  &kp N1  &kp N2  &kp N3  &trans    &trans  &trans          &trans  &trans  &trans
                          &mo 2   &trans    &trans  &lt 3 K_CANCEL
            >;
        };

        navigation_and_media {
            bindings = <
  &kp TAB          &swapper   &kp LS(LC(TAB))  &kp LC(TAB)  &kp C_VOL_UP    &kp PG_UP  &kp HOME      &kp UP        &kp END            &kp BSPC
  &sk LCTRL        &sk LALT   &sk LSHFT        &sk LGUI     &kp C_VOL_DN    &kp PG_DN  &kp LEFT      &kp DOWN      &kp RIGHT          &kp RET
  &ml GLOBE LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &playnp         &kp F18    &kp LG(LBKT)  &kp LG(RBKT)  &kp LS(LG(SPACE))  &kp DEL
                                               &trans       &trans          &trans     &trans
            >;
        };

        symbols {
            bindings = <
  &kp ESC    &kp LBRC   &kp LBKT   &kp LPAR   &kp PIPE      &kp AMPS  &kp RPAR  &kp RBKT   &kp RBRC   &kp DQT
  &kp MINUS  &kp CARET  &kp GRAVE  &kp TILDE  &kp DOLLAR    &kp HASH  &sk RGUI  &sk LSHFT  &sk RALT   &sk RCTRL
  &kp PLUS   &kp EQUAL  &kp ASTRK  &kp FSLH   &kp PRCNT     &kp AT    &kp BSLH  &kp EXCL   &kp QMARK  &kp COLON
                                   &trans     &kp UNDER     &trans    &trans
            >;
        };

        function_and_number_row {
            bindings = <
  &kp N1     &kp N2    &kp N3     &kp N4    &kp N5           &kp N6    &kp N7    &kp N8     &kp N9    &kp N0
  &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11          &kp F12   &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp F1     &kp F2    &kp F3     &kp F4    &kp F5           &kp F6    &kp F7    &kp F8     &kp F9    &kp F10
                                  &trans    &kp LC(LG(Q))    &kp CAPS  &trans
            >;
        };

        mouse {
            bindings = <
  &kp ESCAPE       &mkp MB4   &kp LS(LC(TAB))  &kp LC(TAB)  &kp BSPC         &msc SCRL_DOWN  &msc SCRL_RIGHT  &mmv MOVE_UP    &msc SCRL_LEFT   &kp BSPC
  &kp LCTRL        &kp LALT   &kp LSHFT        &kp LCMD     &kp ENTER        &msc SCRL_UP    &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp ENTER
  &mt GLOBE LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &kp LG(LS(Z))    &kp F18         &mkp MB3         &mkp MB4        &m_hr            &mkp MB5
                                               &to 0        &kp SPACE        &mkp MB1        &mkp MB2
            >;
        };
    };
};
