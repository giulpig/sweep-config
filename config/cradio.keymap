#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#include "mouse.dtsi" // mouse stuff adapted from urob's MOUSE layer. Note to self: self .dtsi files are pointed with quotes "" instead of <> used to point files from remote ZMK
&caps_word {
    /delete-property/ ignore-modifiers; // Canceling &caps_word with mods avoids `CMD-SHIFT-S` when I was just trying to type `CMD-S`, since CMD will cancel &caps_word
    continue-list = <UNDERSCORE MINUS SQT CARET TILDE GRAVE K_CANCEL BACKSPACE DELETE LSHFT>; // LSHFT is required to use some diacriticals in PT-BR  (~, ` and ^). This makes RSHFT a better candidate for my thumb key
};

&sk {
    release-after-ms = <600000>; // set to a bonkers 10mins default is 1s 1000ms to emulate Callum's QMK config
    quick-release; // avoids "THe" problem
};

&lt { flavor = "hold-preferred"; };

&mt { flavor = "balanced"; };

/ {
    combos {
        compatible = "zmk,combos";

        left_hand_enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <23 22>;
            layers = <0 2 4>;
        };

        left_hand_backspace_combo {
            bindings = <&kp BSPC>;
            key-positions = <23 24>;
            layers = <0 4>;
        };

        left_hand_esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1 4>;
        };

        left_hand_space_combo {
            bindings = <&kp SPACE>;
            key-positions = <21 22 23>;
            layers = <0 1 4>;
        };

        toggle_nav_combo {
            key-positions = <30 31>;
            bindings = <&tog 1>;
        };

        activate_smart_mouse_layer_combo {
            key-positions = <26 27 28>;
            bindings = <&smart_mouse>;
        };

        nav_media_mute_combo {
            key-positions = <4 14>;
            layers = <1>;
            bindings = <&kp C_MUTE>;
        };

        sys_bootloader {
            key-positions = <20 21>;
            layers = <3>;
            bindings = <&bootloader>;
        };

        sys_toggle_bt0_connection {
            key-positions = <3 4>;
            layers = <3>;
            bindings = <&bt BT_SEL 0>;
        };

        sys_toggle_bt1_connection {
            key-positions = <13 14>;
            layers = <3>;
            bindings = <&bt BT_SEL 1>;
        };

        sys_toggle_bt2_connection {
            key-positions = <23 24>;
            layers = <3>;
            bindings = <&bt BT_SEL 2>;
        };

        sys_clear_current_bluetooth_profile {
            key-positions = <28 29>;
            layers = <3>;
            bindings = <&bt BT_CLR>;
        };

        aoe_toggle_aoe_gaming_layers {
            bindings = <&tog 5>;
            key-positions = <21 22 23>;
            layers = <0 5>;
        };

        fun_toggle {
            bindings = <&tog_fun>;
            key-positions = <6 7 8>;
        };
    };

    behaviors {
        shft_cw: shift_and_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RSHFT>, <&caps_word>;
        };

        playnextprev: next_previous_song {
            compatible = "zmk,behavior-tap-dance";
            label = "NEXT-PREVIOUS";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;

            tapping-term-ms = <300>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;

            ignored-key-positions = <0 3 7 9 16 17 18 28 29>; // Tab, Shift, Arrow key positions and DEL/BSPC to quit app/close window from altTab
        };

        smart_mouse: smart_mouse {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            label = "SMART_MOUSE";
            #binding-cells = <0>;
            bindings = <&tog 4>, <&none>, <&tog 4>;

            ignored-layers = <4>;
            ignored-key-positions = <7 16 17 18 5 15 6 8 32 33 26 27 28 10 11 12 13 20 21 22 23 1>; // Every key set in mouse layer
        };

    };

    macros {
        lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_queued_sticky_mods {
            label = "LAYER_CANCEL";
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        tog_fun: tog_fun {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>, <&macro_tap>, <&tog 1 &tog 2>;

            label = "TOG_FUN";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer_for_function_and_number_keys {
            if-layers = <2 1>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
  &kp Q        &kp W  &kp E  &kp R  &kp T       &kp Y      &kp U  &kp I      &kp O    &kp P
  &kp A        &kp S  &kp D  &kp F  &kp G       &kp H      &kp J  &kp K      &kp L    &kp SQT
  &mt GLOBE Z  &kp X  &kp C  &kp V  &kp B       &kp N      &kp M  &kp COMMA  &kp DOT  &kp SEMI
                             &lc 1  &shft_cw    &kp SPACE  &lc 2
            >;
        };

        navigation_and_media_layer {
            bindings = <
  &kp TAB          &swapper   &kp LS(LC(TAB))  &kp LC(TAB)  &kp C_VOL_UP     &kp PG_UP  &kp HOME      &kp UP        &kp END            &kp BSPC
  &sk LCTRL        &sk LALT   &sk LSHFT        &sk LCMD     &kp C_VOL_DN     &kp PG_DN  &kp LEFT      &kp DOWN      &kp RIGHT          &kp ENTER
  &mt GLOBE LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &playnextprev    &kp F18    &kp LG(LBKT)  &kp LG(RBKT)  &kp LG(LS(SPACE))  &kp DEL
                                               &lc 1        &mo 2            &trans     &lc 2
            >;
        };

  /*       number_nav {
            bindings = <
  &kp N1        &kp N2        &kp N3             &kp N4     &kp N5          &kp N6   &kp N7    &kp N8     &kp N9     &kp N0
  &sk LCTRL     &sk LALT      &sk LSHFT          &sk LCMD   &tab_swapper    &kp ESC  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT
  &kp LG(LBKT)  &kp LG(RBKT)  &kp LG(RS(SPACE))  &kp ENTER  &kp BSPC        &kp DEL  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END
                                                 &trans     &mo 2           &trans   &trans
            >;
        };
 */
        symbols_layer {
            bindings = <
  &kp LC(LG(SPACE))  &kp LBRC   &kp LBKT   &kp LPAR   &kp TILDE    &kp CARET   &kp RPAR  &kp RBKT   &kp RBRC   &kp GRAVE
  &kp MINUS          &kp ASTRK  &kp EQUAL  &kp UNDER  &kp DLLR     &kp HASH    &sk RGUI  &sk LSHFT  &sk RALT   &sk RCTRL
  &kp PLUS           &kp PIPE   &kp AT     &kp FSLH   &kp PRCNT    &kp LA(N6)  &kp BSLH  &kp AMPS   &kp QMARK  &kp EXCL
                                           &lc 1      &trans       &mo 1       &lc 2
            >;
        };

        function_and_number_row {
            bindings = <
  &kp N1     &kp N2    &kp N3     &kp N4    &kp N5     &kp N6   &kp N7    &kp N8     &kp N9    &kp N0
  &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11    &kp F12  &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp F1     &kp F2    &kp F3     &kp F4    &kp F5     &kp F6   &kp F7    &kp F8     &kp F9    &kp F10
                                  &trans    &trans     &trans   &trans
            >;
        };

        /* function_and_consumer_keys {
            bindings = <
  &kp C_BRI_DN  &kp C_BRI_UP  &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS  &kp C_VOL_DN  &kp C_VOL_UP    &kp C_MUTE  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &none
  &sk LCTRL     &sk LALT      &sk LSHFT                               &sk LGUI      &kp F11         &kp F12     &sk RGUI        &sk LSHFT         &sk RALT    &sk RCTRL
  &kp F1        &kp F2        &kp F3                                  &kp F4        &kp F5          &kp F6      &kp F7          &kp F8            &kp F9      &kp F10
                                                                      &trans        &trans          &trans      &trans
            >;
        }; */

        mouse {
            bindings = <
  &trans     &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &trans     &trans     &trans    &mwh SCROLL_DOWN  &mwh SCROLL_RIGHT  &mmv MOVE_UP    &mwh SCROLL_LEFT  &trans
  &kp LCTRL  &kp LALT                           &kp LSHFT  &kp LCMD   &trans    &mwh SCROLL_UP    &mmv MOVE_LEFT     &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &trans
  &kp LG(Z)  &kp LG(X)                          &kp LG(C)  &kp LG(V)  &trans    &trans            &mkp MB3           &mkp MB4        &mkp MB5          &trans
                                                           &trans     &trans    &mkp MB1          &mkp MB2
            >;
        };

        aoe_default_layer {
            bindings = <
  &kp Q        &kp W       &kp E        &kp R            &kp T        &trans  &trans  &trans  &trans  &trans
  &mt LCTRL A  &mt LALT S  &mt LSHFT D  &mt LCTRL F      &kp G        &trans  &trans  &trans  &trans  &kp ENTER
  &kp Z        &kp X       &kp C        &kp V            &kp B        &trans  &trans  &trans  &trans  &kp F3
                                        &lt 6 LC(LS(H))  &lt 7 DOT    &trans  &trans
            >;
        };

        aoe_unit_and_group_selection {
            bindings = <
  &kp ESC       &kp N7       &kp N8         &kp N9        &kp DEL        &trans  &trans  &trans  &trans  &trans
  &mt LCTRL N2  &mt LALT N3  &mt LSHFT N4   &mt LCTRL N5  &kp N6         &trans  &trans  &trans  &trans  &trans
  &kp SPACE     &kp COMMA    &kp LS(COMMA)  &kp DOT       &kp LS(DOT)    &trans  &trans  &trans  &trans  &trans
                                            &trans        &trans         &trans  &trans
            >;
        };

        aoe_select_all_buildings {
            bindings = <
  &kp LC(LS(M))  &kp LC(LS(S))  &kp LC(LS(U))  &kp LC(LS(Y))  &kp LC(LS(D))    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(A))  &kp LC(LS(L))  &kp LC(LS(B))  &kp LC(LS(K))  &kp LC(LS(H))    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(Z))  &kp LC(LS(I))  &kp LC(LS(G))  &kp LC(LS(V))  &kp H            &trans  &trans  &trans  &trans  &trans
                                               &trans         &trans           &trans  &trans
            >;
        };
    };
};
