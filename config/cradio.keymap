#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0 // Default Apple layers
#define NUM 1
#define NAV 2
#define SYM 3
#define FUN 4
#define AOED 5 // AOE2 Layers for in game shortcuts
#define AOEG 6
#define AOEB 7

&caps_word {
    /delete-property/ ignore-modifiers; // Avoids `CMD-SHIFT-S` when I was just trying to type `CMD-S`
    continue-list = <UNDERSCORE MINUS SQT CARET TILDE GRAVE K_CANCEL BACKSPACE DELETE LSHFT>; // LSHFT is required to use diacriticals in PT-BR, even with ~, ` and ^ dedicated keys
};

&mt {
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <600000>; // set to a bonkers 10mins default is 1s 1000ms
    quick-release;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W  &kp E  &kp R    &kp T       &kp Y      &kp U    &kp I      &kp O    &kp P
&kp A        &kp S  &kp D  &kp F    &kp G       &kp H      &kp J    &kp K      &kp L    &kp SQT
&mt GLOBE Z  &kp X  &kp C  &kp V    &kp B       &kp N      &kp M    &kp COMMA  &kp DOT  &mt GLOBE SEMI
                           &lc NAV  &shft_cw    &kp SPACE  &lc SYM
            >;
        };

        numpad {
            bindings = <
&kp K_CANCEL  &kp N7  &kp N8  &kp N9      &kp SLASH    &trans  &trans            &trans  &trans  &trans
&kp MINUS     &kp N4  &kp N5  &kp N6      &kp ASTRK    &trans  &trans            &trans  &trans  &trans
&kp PLUS      &kp N1  &kp N2  &kp N3      &kp DOT      &trans  &trans            &trans  &trans  &trans
                              &lt NAV N0  &trans       &trans  &lt SYM K_CANCEL
            >;
        };

        navigation_and_media_layer {
            bindings = <
&kp TAB          &swapper   &kp LS(LC(TAB))  &kp LC(TAB)  &kp C_VOL_UP        &kp PG_UP  &kp HOME      &kp UP        &kp END    &kp BSPC
&sk LCTRL        &sk LALT   &sk LSHFT        &sk LGUI     &kp C_VOL_DN        &kp PG_DN  &kp LEFT      &kp DOWN      &kp RIGHT  &kp ENTER
&mt GLOBE LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &kp C_PLAY_PAUSE    &nextprev  &kp LG(LBKT)  &kp LG(RBKT)  &kp CAPS   &mt GLOBE DEL
                                             &trans       &trans              &trans     &trans
            >;
        };

        symbols_layer {
            bindings = <
&kp ESC         &kp LBRC   &kp LBKT   &kp LPAR   &kp TILDE    &kp CARET   &kp RPAR  &kp RBKT   &kp RBRC   &kp GRAVE
&kp MINUS       &kp ASTRK  &kp EQUAL  &kp UNDER  &kp DLLR     &kp HASH    &sk RGUI  &sk RSHFT  &sk RALT   &sk RCTRL
&mt GLOBE PLUS  &kp PIPE   &kp AT     &kp FSLH   &kp PRCNT    &kp LA(N6)  &kp BSLH  &kp AMPS   &kp QMARK  &mt GLOBE EXCL
                                      &trans     &trans       &trans      &trans
            >;
        };

        function_and_number_row {
            bindings = <
&kp N1     &kp N2    &kp N3     &kp N4    &kp N5     &kp N6   &kp N7    &kp N8     &kp N9    &kp N0
&sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11    &kp F12  &sk RGUI  &sk RSHFT  &sk RALT  &sk RCTRL
&kp F1     &kp F2    &kp F3     &kp F4    &kp F5     &kp F6   &kp F7    &kp F8     &kp F9    &kp F10
                                &trans    &trans     &trans   &trans
            >;
        };

        aoe_default_layer {
            bindings = <
&kp Q        &kp W       &kp E        &kp R        &kp T             &trans  &trans  &trans  &trans  &trans
&mt LCTRL A  &mt LALT S  &mt LSHFT D  &mt LCTRL F  &kp G             &trans  &trans  &trans  &trans  &trans
&kp Z        &kp X       &kp C        &kp V        &kp B             &trans  &trans  &trans  &trans  &trans
                                      &lt AOEG H   &lt AOEB SPACE    &trans  &trans
            >;
        };

        aoe_unit_and_group_selection {
            bindings = <
&kp ESC    &trans     &trans         &trans   &kp DEL        &trans  &trans  &trans  &trans  &trans
&kp N2     &kp N3     &kp N4         &kp N5   &kp N6         &trans  &trans  &trans  &trans  &trans
&sk LCTRL  &kp COMMA  &kp LS(COMMA)  &kp DOT  &kp LS(DOT)    &trans  &trans  &trans  &trans  &trans
                                     &trans   &trans         &trans  &trans
            >;
        };

        aoe_all_buildings_selection {
            bindings = <
&kp LC(LS(M))  &kp LC(LS(S))  &kp LC(LS(U))  &kp LC(LS(Y))  &kp LC(LS(D))    &trans  &trans  &trans  &trans  &trans
&kp LC(LS(A))  &kp LC(LS(L))  &kp LC(LS(B))  &kp LC(LS(K))  &kp LC(LS(H))    &trans  &trans  &trans  &trans  &trans
&kp LC(LS(Z))  &kp LC(LS(I))  &kp LC(LS(G))  &kp LC(LS(V))  &kp LC(LS(H))    &trans  &trans  &trans  &trans  &trans
                                             &trans         &trans           &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_toggle_nav {
            key-positions = <30 31>;
            layers = <DEF NAV>;
            bindings = <&tog NAV>;
        };

        combo_num_word {
            key-positions = <32 33>;
            layers = <DEF NUM>;
            bindings = <&numword>;
        };

        combo_expose_desktop {
            key-positions = <2 3>;
            layers = <NAV>;
            bindings = <&expose>;
        };

        combo_mute {
            key-positions = <4 14>; // Vol up + down keys
            layers = <NAV>;
            bindings = <&kp C_MUTE>;
        };

        combo_trigger_bootloader {
            key-positions = <20 21>;
            layers = <FUN>;
            bindings = <&bootloader>;
        };

        combo_toggle_bt0_connection {
            key-positions = <3 4>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 0>;
        };

        combo_toggle_bt1_connection {
            key-positions = <13 14>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 1>;
        };

        combo_toggle_bt2_connection {
            key-positions = <23 24>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 2>;
        };

        combo_clear_current_bluetooth_profile {
            key-positions = <28 29>;
            layers = <FUN>;
            bindings = <&bt BT_CLR>;
        };

        combo_toggle_aoe_layer {
            bindings = <&tog AOED>;
            key-positions = <1 2 3>;
            layers = <DEF AOED>;
        };

        aoe_pause {
            bindings = <&kp F3>;
            key-positions = <21 22 23>;
            layers = <AOED>;
        };
    };

    behaviors {
        shft_cw: shift_and_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RSHFT>, <&caps_word>;
        };
        nextprev: next_previous_song {
            compatible = "zmk,behavior-tap-dance";
            label = "NEXT-PREVIOUS";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp C_NEXT>, <&kp C_PREVIOUS>;
        };
        expose: expose_and_show_desktop {
            compatible = "zmk,behavior-tap-dance";
            label = "EXPOSE_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings =
                <&kp C_AC_DESKTOP_SHOW_ALL_WINDOWS>,
                <&kp LG(C_AC_DESKTOP_SHOW_ALL_WINDOWS)>;
        };
        swapper: swapper {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;

            ignored-key-positions = <0 3 7 9 16 17 18 28 29>; // Tab, Shift, Arrow key positions and DEL/BSPC to quit app/close window from altTab
        };
        numword: numword {
            compatible = "zmk,behavior-caps-word"; // Custom caps-word (PR #1451)
            label = "NUM_WORD_SMART_LAYER";
            #binding-cells = <0>;
            layers = <NUM>;
            continue-list = <BACKSPACE DELETE DOT COMMA SEMI COLON SLASH PLUS MINUS ASTRK EQUAL RGUI LGUI LCTRL RCTRL LALT RALT LSHIFT>;
            ignore-numbers;
            // ignore-modifiers;
        };
        lc_nw: numword_on_press_lc_sym_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "NUM_WORD_LC_SYM";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&lc>, <&numword>;
        };
    };

    macros {
        lc: mo_layer_with_embeded_cancel_for_clearing_queued_sticky_mods_on_key_press {
            label = "LAYER_CANCEL";
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };
};
