#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

// My core layers
#define DEF 0
#define NAV 2 // skipped 1 to make it avaliable for &numword so it can toggle NAV and SYM as they'll remain above such layer
#define SYM 3
#define FUN 4

// ZMK gimmicking (these features require PR #1366 and #1451)
#define NWD 1 // &numword (must be placed bellow NAV and SYM to be able to toggle them from this layer)
#define MOU 5 // &smart_mouse (for the rare occasion when I don't have a mouse with me)

// Mouse config copied from urob's config
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&mmv {
    acceleration-exponent = <1>;      // 1
    time-to-max-speed-ms = <500>;     // 40
    delay-ms = <0>;                   // 0
};

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <40>;      // 500
    delay-ms = <0>;                   // 10
};

&caps_word { // Requires PR #1451.
    /delete-property/ ignore-modifiers; // Canceling &caps_word with mods avoids `CMD-SHIFT-S` when I was just trying to type `CMD-S`, since CMD will cancel &caps_word
    continue-list = <UNDERSCORE MINUS SQT CARET TILDE GRAVE K_CANCEL BACKSPACE DELETE LSHFT>; // adding LSHFT is required to use some dead keys for diacriticals in PT-BR  (such as ~, ` and ^). This makes RSHFT a better candidate for my thumb key, as it can cancel &capsword on activation
};

&sk {
    quick-release; // avoids "THis" problem
    release-after-ms = <60000000>; // 1000 ms is default. I've set mine to a bonkers 1000 minutes timer in order to emulate Callum's OSM, which is timeless, as close as possible
};

// Hold-taps for Z/GLOBE key and NWD layer
&lt { flavor = "hold-preferred"; }; 
&mt { flavor = "balanced"; };

/ {
    combos {
        compatible = "zmk,combos";

        // Left-hand combos for use with the mouse on the right-hand
        left_hand_esc_combo {
            bindings = <&kp ESCAPE>;
            layers = <DEF NAV NWD>;
            key-positions = <0 10>;
        };
        
        left_hand_tab_combo {
            bindings = <&kp TAB>;
            layers = <DEF NWD>;
            key-positions = <1 11>;
        };

        left_hand_enter_combo {
            bindings = <&kp ENTER>;
            layers = <DEF NWD NAV>;
            key-positions = <3 13>;
        };

        left_hand_bspc {
            bindings = <&kp BSPC>;
            key-positions = <4 14>;
            layers = <DEF NWD>;
        };
        
        left_hand_f18_combo {
            bindings = <&kp F18>;
            layers = <DEF NAV>; // On NWD will output .
            key-positions = <13 23>;
        };
      
        // Numword punctuation for left handed input of , . : between numbers
        numword_comma {
            key-positions = <12 22>;
            layers = <NWD>;
            bindings = <&kp COMMA>;
        };
        
        numword_dot {
            key-positions = <13 23>;
            layers = <NWD>;
            bindings = <&kp DOT>;
        };

        numword_colon {
            key-positions = <14 24>;
            layers = <NWD>;
            bindings = <&kp COLON>;
        };
        
        // Layer toggles
        toggle_nav_combo {
            key-positions = <30 31>;
            layers = <DEF NAV>;
            bindings = <&tog NAV>;
        };

        left_half_numword_combo {
            key-positions = <11 13>;
            layers = <DEF NWD>;
            bindings = <&numword>;
        };

        activate_smart_mouse_layer_combo {
            key-positions = <26 27 28>;
            layers = <DEF>;
            bindings = <&smart_mouse>;
        };

        // Media
        nav_media_mute_combo {
            key-positions = <4 14>;
            layers = <NAV>;
            bindings = <&kp C_MUTE>;
        };
        
        // Keyboard adjustments combos (replaces a dedicated SYS layer)
        sys_bootloader {
            key-positions = <20 21>;
            layers = <FUN>;
            bindings = <&bootloader>;
        };

        sys_toggle_bt0_connection {
            key-positions = <3 4>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 0>;
        };

        sys_toggle_bt1_connection {
            key-positions = <13 14>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 1>;
        };

        sys_toggle_bt2_connection { // I've never needed more than three devices, bur this firmware supports up to 5
            key-positions = <23 24>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 2>;
        };

        sys_clear_current_bluetooth_profile {
            key-positions = <28 29>;
            layers = <FUN>;
            bindings = <&bt BT_CLR>;
        };

    };

    behaviors {
        
        // Tap-dances
        shft_cw: shift_and_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RSHFT>, <&caps_word>;
        };

        playnextprev: play_next_previous_media {
            compatible = "zmk,behavior-tap-dance";
            label = "PLAY_NEXT_PREVIOUS";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;
        };

        // Special layers behaviors require PRs #1366 and 1451
        numword: numword {
            compatible = "zmk,behavior-caps-word"; // requires moded caps-word implementation from (PR #1451) will not work with vanilla &caps_word parameters
            label = "NUMWORD_SMART_LAYER";
            #binding-cells = <0>;
            layers = <NWD>;
            continue-list = <BACKSPACE DELETE LPAR RPAR DOT COMMA SEMI COLON SLASH PLUS MINUS ASTRK EQUAL LGUI LALT LCTRL LSHFT RGUI RALT RCTRL>; // RSHFT tap on left thumb will cancel any special layer
            ignore-numbers;
        };

        smart_mouse: smart_mouse {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            label = "SMART_MOUSE";
            #binding-cells = <0>;
            bindings = <&tog MOU>, <&none>, <&tog MOU>;
            ignored-layers = <MOU>;
            ignored-key-positions = <7 16 17 18 5 15 6 8 32 33 26 27 28 10 11 12 13 20 21 22 23 2 3 9 19 29>;
        };

        // Window switching
        swapper: swapper {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt RGUI>, <&kp TAB>, <&kt RGUI>; // changed to RGUI keycode to avoid conflicts with the &sk LGUI key on NAV
            ignored-key-positions = <0 3 7 9 16 17 18 28 29>; // Tab, Shift, Arrow key positions and DEL/BSPC to quit app/close window from altTab
        };

        vb_up: vol_bri_up {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_BRI_UP>;
            mods = <MOD_LSFT>;
        };
        
        vb_dn: vol_bri_down {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_DN>, <&kp C_BRI_DN>;
            mods = <MOD_LSFT>;
        };

    };

    macros {
        lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_press {
            label = "LAYER_CANCEL";
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer_for_function_and_number_keys {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
  &kp Q        &kp W  &kp E  &kp R    &kp T     &kp Y     &kp U  &kp I      &kp O    &kp P
  &kp A        &kp S  &kp D  &kp F    &kp G     &kp H     &kp J  &kp K      &kp L    &kp SQT
  &mt GLOBE Z  &kp X  &kp C  &kp V    &kp B     &kp N     &kp M  &kp COMMA  &kp DOT  &kp SEMI
                             &lc NAV  &shft_cw  &kp SPACE &lc SYM
            >;
        };

        numword_layer {
            bindings = <
  &trans  &kp N7  &kp N8  &kp N9  &trans              &trans  &trans  &trans  &trans  &trans
  &kp N0  &kp N4  &kp N5  &kp N6  &trans              &trans  &trans  &trans  &trans  &trans
  &trans  &kp N1  &kp N2  &kp N3  &trans              &trans  &trans  &trans  &trans  &trans
                          &mo NAV &lt SYM K_CANCEL    &trans  &trans
            >; // Using &mo instead of my &lc to keep the numword behavior while pressed
        };

        navigation_and_media_layer {
            bindings = <
  &kp TAB    &swapper   &kp LS(LC(TAB)) &kp LC(TAB)  &vb_up           &kp PG_UP  &kp HOME      &kp UP        &kp END            &kp BSPC
  &sk LCTRL  &sk LALT   &sk LSHFT       &sk LGUI     &vb_dn           &kp PG_DN  &kp LEFT      &kp DOWN      &kp RIGHT          &kp RET
  &kp LG(Z)  &kp LG(X)  &kp LG(C)       &kp LG(V)    &playnextprev    &kp F18    &kp LG(LBKT)  &kp LG(RBKT)  &kp LS(LG(SPACE))  &kp DEL
                                        &trans       &kp ESC          &trans     &trans
            >; //F18 is the ideal trigger for app-specific-macros in Keyboard Maestro
        };

        symbols_layer {
            bindings = <
  &kp ESC    &kp LBRC   &kp LBKT   &kp LPAR   &kp PRCNT            &kp PIPE   &kp RPAR  &kp RBKT   &kp RBRC   &kp GRAVE
  &kp MINUS  &kp UNDER  &kp AT     &kp TILDE  &kp CARET            &kp HASH   &sk RGUI  &sk LSHFT  &sk RALT   &sk RCTRL
  &kp PLUS   &kp EQUAL  &kp ASTRK  &kp FSLH   &kp DLLR             &kp LA(N6) &kp BSLH  &kp AMPS   &kp QMARK  &kp EXCL
                                   &trans     &kp LC(LG(SPACE))    &trans     &trans
            >; 
        };

        function_and_number_row {
            bindings = <
  &kp N1     &kp N2    &kp N3     &kp N4    &kp N5           &kp N6        &kp N7    &kp N8     &kp N9    &kp N0
  &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11          &kp F12       &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &kp F1     &kp F2    &kp F3     &kp F4    &kp F5           &kp F6        &kp F7    &kp F8     &kp F9    &kp F10
                                  &trans    &kp LC(LG(Q))    &kp CAPSLOCK  &trans
            >;
        };

        mouse {
            bindings = <
  &none            &none      &kp LS(LC(TAB))  &kp LC(TAB)  &none    &msc SCRL_DOWN  &msc SCRL_RIGHT  &mmv MOVE_UP    &msc SCRL_LEFT   &kp BSPC
  &kp LCTRL        &kp LALT   &kp LSHFT        &kp LCMD     &none    &msc SCRL_UP    &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp ENTER
  &mt GLOBE LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &none    &kp F18         &mkp MB3         &mkp MB4        &mkp MB5         &kp DEL
                                               &none        &none    &mkp MB1        &mkp MB2
            >; // F18 is here as well
        };
    };
};