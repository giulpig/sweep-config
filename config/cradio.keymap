#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

// Core layers

#define DEF 0
#define NWD 1   // &numword (must be placed bellow NAV and SYM to be able to toggle them from this layer)
#define NAV 2
#define SYM 3
#define FUN 4
#define MOU 5   // for the rare occasion when I don't have a mouse with me

// AOE2 layers

#define AOE 6   // Base layer is QWERT with home row mods on left hand and &lt on thumbs
#define ASG 7   // Group selection layer
#define ASB 8   // Select buildings layer

// Mouse movement parameters

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1500
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20

&mmv {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <500>;
    delay-ms = <0>;
};

&msc {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <40>;
    delay-ms = <0>;
};

// Overrides

&mt { flavor = "balanced"; };

&sk {
    quick-release; // Default releases on key up. This release the mod on key down and avoids "THis" problem
    release-after-ms = <86400000>; // Default is 1000 ms, raised to 1 day to emulate Callum's behavior that requires canceling on layer key.
    lazy;
};

&caps_word {
    /delete-property/ ignore-modifiers; // Canceling &caps_word with mods avoids `CMD-SHIFT-S` when I was just trying to type `CMD-S`, since CMD will cancel &caps_word
    continue-list = <UNDERSCORE MINUS SQT CARET TILDE GRAVE K_CANCEL BACKSPACE DELETE LSHFT>; // LSHFT is needed diacriticals. This makes RSHFT a better thumb key that cancels &caps_word
};

/ {
    combos {
        compatible = "zmk,combos";

        left_hand_esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <0 10>;
            require-prior-idle-ms = <180>;
        };

        left_hand_f18_combo {
            bindings = <&kp F18>;   // Handy for using as trigger in Keyboard Maestro for App-Specific macros
            key-positions = <2 12>;
            require-prior-idle-ms = <180>;
        };

        left_hand_enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <3 13>;
            require-prior-idle-ms = <180>;
        };

        left_hand_bspc {
            bindings = <&kp BSPC>;
            key-positions = <4 14>;
            layers = <DEF NWD AOE MOU>; // On NAV this combo is mapped to MUTE
        };

        // Layer combos

        aoe_toggle_gaming_layers {
            bindings = <&tog AOE>;
            layers = <DEF AOE>;
            key-positions = <21 22 23>;
        };

        toggle_nav_layer_combo {
            key-positions = <30 31>;
            layers = <DEF NAV>;
            bindings = <&tog NAV>;
        };

        toggle_mouse_layer_combo {
            key-positions = <26 27 28>;
            layers = <DEF MOU>;
            bindings = <&tog MOU>;
        };

        // &numword combos

        numword_toggle {
            key-positions = <11 13>;
            layers = <DEF NWD>;
            bindings = <&numword>;
            require-prior-idle-ms = <180>;
        };

        numword_comma {
            key-positions = <12 22>;
            layers = <NWD>;
            bindings = <&kp COMMA>;
            require-prior-idle-ms = <180>;
        };

        numword_dot {
            key-positions = <13 23>;
            layers = <NWD>;
            bindings = <&kp DOT>;
            require-prior-idle-ms = <180>;
        };

        numword_colon {
            key-positions = <14 24>;
            layers = <NWD>;
            bindings = <&kp COLON>;
            require-prior-idle-ms = <180>;
        };

        // sys combos replace a dedicated system layer

        sys_bootloader {
            key-positions = <20 21>;
            layers = <FUN>;
            bindings = <&bootloader>;
        };

        sys_connect_to_bt0 {
            key-positions = <3 4>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 0>;
        };

        sys_connect_to_bt1 {
            key-positions = <13 14>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 1>;
        };

        sys_connect_to_bt2 {
            key-positions = <23 24>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 2>;
        };

        sys_clear_current_bluetooth_profile {
            key-positions = <28 29>;
            layers = <FUN>;
            bindings = <&bt BT_CLR>;
        };

        // Other combos

        caps_word_combo {
            key-positions = <12 17>;
            bindings = <&caps_word>;
        };

        media_mute_combo {
            key-positions = <4 14>;
            layers = <NAV>;
            bindings = <&kp C_MUTE>;
        };

        alfred {
            bindings = <&kp LG(SPACE)>;
            key-positions = <16 18>;
        };
    };

    behaviors {
        playnp: play_next_previous_media {
            compatible = "zmk,behavior-tap-dance";
            label = "PLAY_NEXT_PREVIOUS";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;
        };

        numword: numword {
            compatible = "zmk,behavior-caps-word"; // requires moded caps-word implementation from (PR #1451) will not work with vanilla &caps_word parameters
            label = "NUMWORD_SMART_LAYER";
            #binding-cells = <0>;
            layers = <NWD>;
            continue-list = <LPAR RPAR LBKT RBKT LBRC RBRC TAB DOT COMMA SEMI COLON SLASH PLUS MINUS ASTRK EQUAL BACKSPACE DELETE>;
            ignore-numbers;
            ignore-modifiers;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt RGUI>, <&kp TAB>, <&kt RGUI>;

            // changed to RGUI keycode to avoid conflicts with the &sk LGUI key on NAV

            ignored-key-positions = <0 3 7 9 16 17 18 28 29>; // Tab, Shift, Arrow key positions and DEL/BSPC to quit app/close window from altTab app
        };

        vb_up: volume_brightness_up {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_BRI_UP>;

            mods = <MOD_LSFT>;
        };

        vb_dn: volume_brightness_down {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_DN>, <&kp C_BRI_DN>;

            mods = <MOD_LSFT>;
        };

        ml: ml {
            compatible = "zmk,behavior-hold-tap";
            label = "ML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33>;
            hold-trigger-on-release;
        };

        mr: mr {
            compatible = "zmk,behavior-hold-tap";
            label = "MR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
            hold-trigger-on-release;
        };

        skh: skh {
            compatible = "zmk,behavior-hold-tap";
            label = "SKH";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-while-undecided-linger;
            hold-while-undecided;
        };

        shft_cw: shft_cw {
            compatible = "zmk,behavior-tap-dance";
            label = "SHFT_CW";
            #binding-cells = <0>;
            bindings = <&kp RSHFT>, <&caps_word>;

            tapping-term-ms = <300>;
        };
    };

    macros {
        lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_press {
            label = "LAYER_CANCEL";
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        m_hr: from_mouse_layer_to_def_with_homerow_app_activation {
            label = "MOUSE_TO_HOMEROW";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&to DEF &kp LG(LS(SPC))>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer_for_function_and_number_keys {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alphas {
            bindings = <
  &kp Q       &kp W  &kp E  &kp R    &kp T        &kp Y      &kp U    &kp I      &kp O    &kp P
  &kp A       &kp S  &kp D  &kp F    &kp G        &kp H      &kp J    &kp K      &kp L    &kp SQT
  &ml CAPS Z  &kp X  &kp C  &kp V    &kp B        &kp N      &kp M    &kp COMMA  &kp DOT  &mr CAPS SEMI
                            &lc NAV  &kp RSHFT    &kp SPACE  &lc SYM
            >;
        };

        numpad {
            bindings = <
  &trans  &kp N7  &kp N8  &kp N9   &trans              &trans  &trans            &trans  &trans  &trans
  &kp N0  &kp N4  &kp N5  &kp N6   &trans              &trans  &trans            &trans  &trans  &trans
  &trans  &kp N1  &kp N2  &kp N3   &trans              &trans  &trans            &trans  &trans  &trans
                          &mo NAV  &lt SYM K_CANCEL    &trans  &lt SYM K_CANCEL
            >;
        };

        navigation_and_media {
            bindings = <
  &kp TAB           &swapper        &kp LS(LC(TAB))   &kp LC(TAB)     &vb_up     &kp PG_UP  &kp HOME      &kp UP        &kp END            &kp BSPC
  &skh LCTRL LCTRL  &skh LALT LALT  &skh LSHFT LSHFT  &skh LGUI LGUI  &vb_dn     &kp PG_DN  &kp LEFT      &kp DOWN      &kp RIGHT          &kp RET
  &ml CAPS LG(Z)    &kp LG(X)       &kp LG(C)         &kp LG(V)       &playnp    &kp F18    &kp LG(LBKT)  &kp LG(RBKT)  &kp LS(LG(SPACE))  &mr CAPS DEL
                                                      &trans          &trans     &trans     &trans
            >;
        };

        symbols {
            bindings = <
  &kp ESC        &kp LBRC   &kp LBKT   &kp LPAR   &kp PIPE      &kp AMPS  &kp RPAR  &kp RBKT   &kp RBRC   &kp LA(N6)
  &kp MINUS      &kp CARET  &kp GRAVE  &kp TILDE  &kp DOLLAR    &kp HASH  &sk RGUI  &sk LSHFT  &sk RALT   &sk RCTRL
  &ml CAPS PLUS  &kp EQUAL  &kp ASTRK  &kp FSLH   &kp PRCNT     &kp AT    &kp BSLH  &kp COLON  &kp QMARK  &mr CAPS EXCL
                                       &trans     &kp UNDER     &trans    &trans
            >;
        };

        function_and_number_row {
            bindings = <
  &kp N1       &kp N2    &kp N3     &kp N4    &kp N5           &kp N6             &kp N7    &kp N8     &kp N9    &kp N0
  &sk LCTRL    &sk LALT  &sk LSHFT  &sk LGUI  &kp F11          &kp F12            &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
  &ml CAPS F1  &kp F2    &kp F3     &kp F4    &kp F5           &kp F6             &kp F7    &kp F8     &kp F9    &mr CAPS F10
                                    &trans    &kp LC(LG(Q))    &kp K_APPLICATION  &trans
            >;
        };

        mouse {
            bindings = <
  &tog MOU         &mkp MB4   &kp LS(LC(TAB))  &kp LC(TAB)  &none       &msc SCRL_DOWN  &msc SCRL_RIGHT  &mmv MOVE_UP    &msc SCRL_LEFT   &kp BSPC
  &kp LCTRL        &kp LALT   &kp LSHFT        &kp LCMD     &none       &msc SCRL_UP    &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp ENTER
  &mt GLOBE LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &none       &kp F18         &mkp MB3         &mkp MB4        &m_hr            &mkp MB5
                                               &tog MOU     &tog MOU    &mkp MB1        &mkp MB2
            >;
        };

        aoe_default_layer {
            bindings = <
  &kp Q        &kp W       &kp E        &kp R        &kp T          &trans  &trans  &trans  &trans  &trans
  &mt LCTRL A  &mt LALT S  &mt LSHFT D  &mt LCTRL F  &kp G          &trans  &trans  &trans  &trans  &trans
  &lt NAV Z    &kp X       &kp C        &kp V        &kp B          &trans  &trans  &trans  &trans  &trans
                                        &lt ASG H    &lt ASB DOT    &trans  &trans
            >;
        };

        aoe_unit_and_group_selection {
            bindings = <
  &kp N1        &kp N2       &kp N3        &kp N4        &kp N5     &trans  &trans  &trans  &trans  &trans
  &mt LCTRL N6  &mt LALT N7  &mt LSHFT N8  &mt LCTRL N9  &kp N0     &trans  &trans  &trans  &trans  &trans
  &kp COMMA     &kp BSPC     &kp SPACE     &kp DOT       &kp H      &trans  &trans  &trans  &trans  &trans
                                           &trans        &kp DEL    &trans  &trans
            >;
        };

        aoe_select_all_buildings {
            bindings = <
  &kp LC(LS(M))  &kp LC(LS(S))  &kp LC(LS(U))  &kp LC(LS(Y))  &kp LS(COMMA)    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(A))  &kp LC(LS(L))  &kp LC(LS(B))  &kp LC(LS(K))  &kp LS(LC(D))    &trans  &trans  &trans  &trans  &trans
  &kp LC(LS(Z))  &kp LC(LS(I))  &kp LC(LS(G))  &kp LC(LS(V))  &kp LC(LS(H))    &trans  &trans  &trans  &trans  &trans
                                               &trans         &trans           &trans  &trans
            >;
        };
    };
};
