#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "apple_globe.h"

// Apple layers (CASG mods)
#define DEF 0
#define NUM 1
#define NAV 2
#define SYM 3
#define FUN 4

// Windows layers (GASC mods)
#define WDEF 5
#define WNUM 6
#define WNAV 7
#define WSYM 8
#define WFUN 9

// Mod-taps layers (CASG mods)
#define HRDEF 10
#define HRNUM 11
#define HRNAV 12
#define HRSYM 13
#define HRFUN 14

// AOE Layers
#define AOED 15
#define AOEG 16
#define AOEB 17



&caps_word {
    continue-list = <UNDERSCORE MINUS SQT CARET TILDE GRAVE K_CANCEL BACKSPACE DELETE LSHFT>;
    /delete-property/ ignore-modifiers;
};

&mt {
    flavor = "tap-preferred";
};

&sk {
     release-after-ms = <600000>; // set to a bonkers 10mins default is 1s 1000ms
};

/ {
    combos {
        compatible = "zmk,combos";

        // macOS combos
        combo_toggle_nav {
            key-positions = <30 31>;
            layers = <DEF NAV>;
            bindings = <&tog NAV>;
        };

        // Windows combos

        combo_toggle_between_windows_and_apple_mods {
            key-positions = <10 19>; // A "
            layers = <FUN WFUN>;
            bindings = <&tog WNAV>;
        };

        combo_toggle_wnav {
            key-positions = <30 31>;
            layers = <WDEF WNAV>;
            bindings = <&tog WNAV>;
        };


        // Multimedia and keyboard features (OS agnostic)

        combo_mute {
            key-positions = <4 14>; // Vol up + down keys
            layers = <NAV WNAV>;
            bindings = <&kp C_MUTE>;
        };

        combo_trigger_bootloader {
            key-positions = <20 21>;
            layers = <FUN WFUN>;
            bindings = <&bootloader>;
        };

        combo_toggle_between_hrmt_and_callum_mods {
            key-positions = <20 29>; // Z ;
            layers = <FUN HRFUN>;
            bindings = <&tog HRDEF>;
        };
        combo_hr_numw_ord {
            key-positions = <20 29>; // Z ;
            layers = <HRDEF>;
            bindings = <&hrmt_num_word>;
        };

        // Bluetooth toggles

        combo_toggle_bt0_connection {
            key-positions = <3 4>;
            layers = <FUN WFUN>;
            bindings = <&bt BT_SEL 0>;
        };

        combo_toggle_bt1_connection {
            key-positions = <13 14>;
            layers = <FUN WFUN>;
            bindings = <&bt BT_SEL 1>;
        };

        combo_toggle_bt2_connection {
            key-positions = <23 24>;
            layers = <FUN WFUN>;
            bindings = <&bt BT_SEL 2>;
        };

        combo_clear_current_bluetooth_profile {
            key-positions = <28 29>;
            layers = <FUN WFUN>;
            bindings = <&bt BT_CLR>;
        };

        // AOE layers

        combo_toggle_aoe {
            bindings = <&tog AOED>;
            key-positions = <1 2 3>;
            layers = <DEF WDEF AOED>;
        };

        aoe_pause {
            bindings = <&kp F3>;
            key-positions = <21 22 23>;
            layers = <AOED>;
        };
    };

    behaviors {
        
        // Tap dances
        
        shift_cw: tap_dance_shift_and_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp RSHFT>,
                <&caps_word>;
        };

        playnextprev: playnextprev {
            compatible = "zmk,behavior-tap-dance";
            label = "PLAYNEXTPREV";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings =
                <&kp C_PLAY_PAUSE>,
                <&kp C_NEXT>,
                <&kp C_PREVIOUS>;
        };

        // Swappers

        swapper: swapper {
            compatible = "zmk,behavior-tri-state"; // requires tri-state PR #1366 (not yet merged into main)
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings =
                <&kt LCMD>,
                <&kp TAB>,
                <&kt LCMD>;

            ignored-key-positions = <0 3 7 9 16 17 18 28 29>; // Tab, Shift, Arrow key positions and DEL/BSPC to quit app/close window from altTab
        };

        wswapper: windows_swapper {
            compatible = "zmk,behavior-tri-state"; // requires tri-state PR #1366 (not yet merged into main)
            label = "WINDOWS_SWAPPER";
            #binding-cells = <0>;
            bindings =
                <&kt LALT>,
                <&kp TAB>,
                <&kt LALT>;

            ignored-key-positions = <3>; // Shift key on WNAV to allow for backwards movement
        };

        // num_word for macOS and Windows

        num_word: behavior_num_word {
            compatible = "zmk,behavior-caps-word"; // Custom caps-word behavior form PR #1451
            label = "NUM_WORD";
            #binding-cells = <0>;
            layers = <NUM>; // insert location of numbers layer here
            continue-list = <BACKSPACE DELETE DOT COMMA SEMI COLON SLASH PLUS MINUS ASTRK EQUAL>; // adjust as desired
            ignore-numbers; // numbers don't deactivate the layer
            ignore-modifiers; // mods don't deactivate the layer
        };

        wnum_word: win_behavior_num_word {
            compatible = "zmk,behavior-caps-word"; // Custom caps-word behavior form PR #1451
            label = "WINDOWS_NUM_WORD";
            #binding-cells = <0>;
            layers = <WNUM>; // insert location of numbers layer here
            continue-list = <BACKSPACE DELETE DOT COMMA SEMI COLON SLASH PLUS MINUS ASTRK EQUAL>; // adjust as desired
            ignore-numbers; // numbers don't deactivate the layer
            ignore-modifiers; // mods don't deactivate the layer
        };
        
        hrmt_num_word: hrmt_behavior_num_word {
            compatible = "zmk,behavior-caps-word"; // Custom caps-word behavior form PR #1451
            label = "HR_NUM_WORD";
            #binding-cells = <0>;
            layers = <HRNUM>; // insert location of numbers layer here
            continue-list = <BACKSPACE DELETE DOT COMMA SEMI COLON SLASH PLUS MINUS ASTRK EQUAL>; // adjust as desired
            ignore-numbers; // numbers don't deactivate the layer
            ignore-modifiers; // mods don't deactivate the layer
        };

        numword_sym: numword_sym { // combines. tap: &num_word, hold: SYM (with cancel)
            compatible = "zmk,behavior-hold-tap";
            label = "NUMWORD_SYM";
            bindings =
                <&lc_sym>,
                <&num_word>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        
        wnumword_sym: win_numword_sym { // for the keymap on windows layers. tap: &wnum_word, hold: WSYM (with cancel)
            compatible = "zmk,behavior-hold-tap";
            label = "WINDOWS_NUMWORD_SYM";
            bindings =
                <&lc_wsym>,
                <&wnumword_sym>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        
        hp_mt: hp_mt { // hold-preffered mod taps
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_PREFFERED_MOD_TAP";
            flavor = "hold-preferred";
            bindings =
                <&kp>,
                <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    macros {
        lc_nav: lc_nav {
            label = "LC_NAV";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo NAV>,
                <&macro_tap>,
                <&kp K_CANCEL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo NAV>;
        };
        lc_sym: lc_sym {
            label = "LC_SYM";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo SYM>,
                <&macro_tap>,
                <&kp K_CANCEL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo SYM>;
        };
        lc_wnav: lc_wnav {
            label = "LC_WNAV";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo WNAV>,
                <&macro_tap>,
                <&kp K_CANCEL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo WNAV>;
        };
        lc_wsym: lc_wsym {
            label = "LC_WSYM";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo WSYM>,
                <&macro_tap>,
                <&kp K_CANCEL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo WSYM>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        macos_tri_layer {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };

        windows_tri_layer {
            if-layers = <WNAV WSYM>;
            then-layer = <WFUN>;
        };
        hrmt_tri_layer {
            if-layers = <HRNAV HRSYM>;
            then-layer = <HRFUN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        apple_default_layer {
            bindings = <
                &kp Q        &kp W  &kp E  &kp R    &kp T          &kp Y      &kp U   &kp I      &kp O    &kp P
                &kp A        &kp S  &kp D  &kp F    &kp G          &kp H      &kp J   &kp K      &kp L    &kp SQT
                &mt GLOBE Z  &kp X  &kp C  &kp V    &kp B          &kp N      &kp M   &kp COMMA  &kp DOT  &mt GLOBE SEMI
                                           &lc_nav  &shift_cw      &kp SPACE  &numword_sym 0 0
            >;
        };

        apple_numpad {
            bindings = <
                &kp SLASH  &kp N7  &kp N8  &kp N9      &kp PLUS   &trans  &trans  &trans  &trans  &trans
                &kp ASTRK  &kp N4  &kp N5  &kp N6      &kp ENTER  &trans  &trans  &trans  &trans  &trans
                &kp MINUS  &kp N1  &kp N2  &kp N3      &kp DOT    &trans  &trans  &trans  &trans  &trans
                                           &lt NAV N0  &trans     &trans  &lt SYM N0
            >;
        };

        apple_navigation_and_media_layer {
            bindings = <
                &kp TAB          &swapper   &kp LS(LC(TAB))  &kp LC(TAB)  &kp C_VOL_UP     &kp PG_UP   &kp HOME      &kp UP        &kp END     &kp BSPC
                &sk LCTRL        &sk LALT   &sk LSHFT        &sk LGUI     &kp C_VOL_DN     &kp PG_DN   &kp LEFT      &kp DOWN      &kp RIGHT   &kp ENTER
                &mt GLOBE LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &playnextprev    &caps_word  &kp LG(LBKT)  &kp LG(RBKT)  &trans  &mt GLOBE DEL
                                                             &trans       &trans           &trans      &trans
            >;
        };

        apple_symbols_layer {
            bindings = <
                &kp ESC          &kp LBRC   &kp LBKT   &kp LPAR   &kp TILDE    &kp CARET   &kp RPAR  &kp RBKT   &kp RBRC   &kp GRAVE
                &kp MINUS        &kp ASTRK  &kp EQUAL  &kp UNDER  &kp DLLR     &kp HASH    &sk RGUI  &sk RSHFT  &sk RALT   &sk RCTRL
                &mt GLOBE PLUS   &kp PIPE   &kp AT     &kp FSLH   &kp PRCNT    &kp LA(N6)  &kp BSLH  &kp AMPS   &kp QMARK  &mt GLOBE EXCL
                                                       &trans     &trans       &trans      &trans
            >;
        };

        apple_tri_layer_function_and_number_row {
            bindings = <
                &kp N1     &kp N2    &kp N3     &kp N4    &kp N5     &kp N6   &kp N7    &kp N8     &kp N9    &kp N0
                &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11    &kp F12  &sk RGUI  &sk RSHFT  &sk RALT  &sk RCTRL
                &kp F1     &kp F2    &kp F3     &kp F4    &kp F5     &kp F6   &kp F7    &kp F8     &kp F9    &kp F10
                                                &trans    &trans     &trans   &trans
            >;
        };

        windows_default_layer {
            bindings = <
                &kp Q  &kp W  &kp E  &kp R     &kp T        &kp Y    &kp U     &kp I      &kp O    &kp P
                &kp A  &kp S  &kp D  &kp F     &kp G        &kp H    &kp J     &kp K      &kp L    &kp SQT
                &kp Z  &kp X  &kp C  &kp V     &kp B        &kp N    &kp M     &kp COMMA  &kp DOT  &kp SEMI
                                     &lc_wnav  &shift_cw    &kp SPC  &wnumword_sym 0 0
            >;
        };

        windows_numpad {
            bindings = <
                &kp SLASH  &kp N7  &kp N8  &kp N9      &kp PLUS    &trans  &trans  &trans  &trans  &trans
                &kp ASTRK  &kp N4  &kp N5  &kp N6      &kp ENTER   &trans  &trans  &trans  &trans  &trans
                &kp MINUS  &kp N1  &kp N2  &kp N3      &kp DOT     &trans  &trans  &trans  &trans  &trans
                                           &lt WNAV N0 &trans      &trans  &lt WSYM K_CANCEL
            >;
        };

        windows_navigation_and_media_layer {
            bindings = <
                &kp TAB    &wswapper  &kp LS(LC(TAB))  &kp LC(TAB)  &kp C_VOL_UP     &kp PG_UP               &kp HOME      &kp UP         &kp END            &kp BSPC
                &sk LGUI   &sk LALT   &sk LSHFT        &sk LCTRL    &kp C_VOL_DN     &kp PG_DN               &kp LEFT      &kp DOWN       &kp RIGHT          &kp ENTER
                &kp LC(Z)  &kp LC(X)  &kp LC(C)        &kp LC(V)    &playnextprev    &kp LG(LC(LEFT_ARROW))  &kp LA(LEFT)  &kp LA(RIGHT)  &kp LG(LC(RIGHT))  &kp DEL
                                                       &trans       &trans           &trans                  &lc_wsym
            >;
        };

        windows_symbols_layer {
            bindings = <
                &kp ESC    &kp LBRC   &kp LBKT   &kp LPAR  &kp TILDE    &kp CARET  &kp RPAR   &kp RBKT   &kp RBRC   &kp GRAVE
                &kp MINUS  &kp ASTRK  &kp EQUAL  &kp PLUS  &kp DLLR     &kp HASH   &sk RCTRL  &sk RSHFT  &sk RALT   &sk RGUI
                &kp UNDER  &kp PIPE   &kp AT     &kp FSLH  &kp PRCNT    &none      &kp BSLH   &kp AMPS   &kp QMARK  &kp EXCL
                                                 &trans    &trans       &trans     &lc_wsym
            >;
        };

        windows_tri_layer_function_and_number_row {
            bindings = <
                &kp N1    &kp N2    &kp N3     &kp N4     &kp N5     &kp N6   &kp N7     &kp N8     &kp N9    &kp N0
                &sk LGUI  &sk LALT  &sk LSHFT  &sk LCTRL  &kp F11    &kp F12  &sk RCTRL  &sk RSHFT  &sk RALT  &sk RGUI
                &kp F1    &kp F2    &kp F3     &kp F4     &kp F5     &kp F6   &kp F7     &kp F8     &kp F9    &kp F10
                                               &trans     &trans     &trans   &lc_wsym
            >;
        };

        hrmt_default_layer {
            bindings = <
                &kp Q        &kp W       &kp E        &kp R          &kp T               &kp Y      &kp U           &kp I        &kp O       &kp P
                &mt LCTRL A  &mt LALT S  &mt LSHFT D  &mt LGUI F     &kp G               &kp H      &mt RGUI J      &mt RSHFT K  &mt RALT L  &mt RCTRL SQT
                &mt GLOBE Z  &kp X       &kp C        &kp V          &kp B               &kp N      &kp M           &kp COMMA    &kp DOT     &mt GLOBE SEMI
                                                      &lt HRNAV TAB  &hp_mt LSHFT ENTER  &kp SPACE  &lt HRSYM BSPC
            >;
        };

        hrmt_numpad {
            bindings = <
                &kp SLASH  &kp N7  &kp N8  &kp N9        &kp PLUS       &trans  &trans  &trans  &trans  &trans
                &kp ASTRK  &kp N4  &kp N5  &kp N6        &kp ENTER      &trans  &trans  &trans  &trans  &trans
                &kp MINUS  &kp N1  &kp N2  &kp N3        &kp DOT        &trans  &trans  &trans  &trans  &trans
                                           &lt HRNAV N0  &trans         &trans  &lt HRSYM K_CANCEL
            >;
        };

        hrmt_navigation_and_media_layer {
            bindings = <
                &kp N1           &kp N2        &kp N3           &kp N4       &kp N5           &kp N6        &kp N7        &kp N8        &kp N9      &kp N0
                &kp LCTRL        &kp LALT      &kp LSHFT        &kp LGUI     &swapper         &kp PG_UP     &kp LEFT      &kp UP        &kp RIGHT   &kp BSPC
                &mt GLOBE LG(LBKT) &kp LG(RBKT) &kp LS(LC(TAB)) &kp LC(TAB)  &kp CAPS         &kp PG_DN     &kp HOME      &kp DOWN      &kp END     &mt GLOBE DEL
                                                                &trans       &trans           &trans        &trans
            >;
        };

        hrmt_symbols_layer {
            bindings = <
                &kp ESC          &kp LBRC   &kp LBKT   &kp LPAR   &kp TILDE    &kp CARET   &kp RPAR  &kp RBKT   &kp RBRC   &kp GRAVE
                &kp MINUS        &kp ASTRK  &kp EQUAL  &kp UNDER  &kp DLLR     &kp HASH    &kp RGUI  &kp RSHFT  &kp RALT   &kp RCTRL
                &mt GLOBE PLUS   &kp PIPE   &kp AT     &kp FSLH   &kp PRCNT    &kp LA(N6)  &kp BSLH  &kp AMPS   &kp QMARK  &mt GLOBE EXCL
                                                       &trans     &trans       &trans      &trans
            >;
        };

        hrmt_tri_layer_function_and_number_row {
            bindings = <
                &kp F1     &kp F2    &kp F3     &kp F4    &kp F5     &kp F6   &kp F7    &kp F8     &kp F9    &kp F10
                &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11    &kp F12  &sk RGUI  &sk RSHFT  &sk RALT  &sk RCTRL
                &kp C_BRI_DEC &kp C_BRI_INC &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS &kp LG(SPC) &kp C_VOL_DN &kp C_VOL_UP &kp C_PREV &kp C_PLAY_PAUSE &kp C_NEXT &kp C_MUTE
                                                &trans    &trans     &trans   &trans
            >;
        };

        aoe_def {
            bindings = <
                &kp Q  &kp W       &kp E        &kp R        &kp T         &trans  &trans  &trans  &trans  &trans
                &kp A  &mt LALT S  &mt LSHFT D  &mt LCTRL F  &kp G         &trans  &trans  &trans  &trans  &trans
                &kp Z  &kp X       &kp C        &kp V        &kp B         &trans  &trans  &trans  &trans  &trans
                                                &lt AOEG H   &lt AOEB ESC  &trans  &trans
            >;
        };

        aoe_group {
            bindings = <
                &kp N2      &kp N3      &kp N4      &kp N5      &kp N6             &trans  &trans  &trans  &trans  &trans
                &kp N2      &kp N3      &kp N4      &kp N5      &mt LCTRL COMMA    &trans  &trans  &trans  &trans  &trans
                &kp LC(N2)  &kp LC(N3)  &kp LC(N4)  &kp LC(N5)  &kp LC(N6)         &trans  &trans  &trans  &trans  &trans
                                                    &trans      &kp DEL            &trans  &trans
            >;
        };

        aoe_buildings {
            bindings = <
                &kp LC(LS(M))  &kp LC(LS(S))  &kp LC(LS(U))  &kp LC(LS(Y))  &kp LC(LS(D))    &trans  &trans  &trans  &trans  &trans
                &kp LC(LS(A))  &kp LC(LS(L))  &kp LC(LS(B))  &kp LC(LS(K))  &kp LS(DOT)      &trans  &trans  &trans  &trans  &trans
                &kp LC(LS(Z))  &kp LC(LS(I))  &kp LC(LS(G))  &kp LC(LS(V))  &kp LS(COMMA)    &trans  &trans  &trans  &trans  &trans
                                                             &kp LC(LS(H))  &trans           &trans  &trans
            >;
        };

    };
};
