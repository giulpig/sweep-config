#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Apple layers (CASG mods)

#define DEF 0
#define NAV 1
#define SYM 2
#define FUN 3

// Windows layers (GASC mods)

#define WDEF 4
#define WNAV 5
#define WSYM 6
#define WFUN 7


&caps_word {
    continue-list = <UNDERSCORE MINUS SQT CARET TILDE GRAVE K_CANCEL BACKSPACE DELETE>;
};

/ {
    combos {
        compatible = "zmk,combos";

        // macOS combos

        combo_spotlight_alfred {
            timeout-ms = <80>;
            key-positions = <13 16>;// F J
            layers = <DEF>;
            bindings = <&kp LG(SPC)>;
        };

        combo_shortcat {
            timeout-ms = <80>;
            key-positions = <12 17>;// D K
            layers = <DEF>;
            bindings = <&kp LG(LS(SPC))>;
        };

        combo_toggle_nav {
            timeout-ms = <80>;
            key-positions = <30 31>;
            layers = <DEF NAV>;
            bindings = <&tog NAV>;
        };

        // Windows combos

        combo_toggle_between_windows_and_apple_mods {
            timeout-ms = <80>;
            key-positions = <10 19>;// A "
            layers = <FUN WFUN>;
            bindings = <&tog WDEF>;
        };

        combo_windows_start_menu {
            timeout-ms = <80>;
            key-positions = <13 16>;// F J
            layers = <WDEF>;// Only available in the Windows' DEF layer
            bindings = <&kp LGUI>;
        };

        combo_toggle_wnav {
            timeout-ms = <80>;
            key-positions = <30 31>;
            layers = <WDEF WNAV>;
            bindings = <&tog WNAV>;
        };

        // Multimedia and keyboard features (OS agnostic)

        combo_mute {
            timeout-ms = <80>;
            key-positions = <4 14>;// Vol up + down keys
            layers = <NAV WNAV>;// Only available in the NAV layer, system agnostic
            bindings = <&kp C_MUTE>;
        };

        combo_trigger_bootloader {
            timeout-ms = <80>;
            key-positions = <20 21>;
            layers = <FUN>;
            bindings = <&bootloader>;
        };

        combo_toggle_bt0_connection {
            timeout-ms = <80>;
            key-positions = <3 4>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 0>;
        };

        combo_toggle_bt1_connection {
            timeout-ms = <80>;
            key-positions = <13 14>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 1>;
        };

        combo_toggle_bt2_connection {
            timeout-ms = <80>;
            key-positions = <23 24>;
            layers = <FUN>;
            bindings = <&bt BT_SEL 2>;
        };

        combo_clear_current_bluetooth_profile {
            timeout-ms = <80>;
            key-positions = <28 29>;
            layers = <FUN>;
            bindings = <&bt BT_CLR>;
        };
    };

    behaviors {
        shift_cw: tap_dance_shift_and_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp LSHFT>,
                <&caps_word>;
        };
        nextprev: tap_dance_media_for_next_and_prev {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_NEXT_PREV";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp C_NEXT>,
                <&kp C_PREV>;
        };
        swapper: swapper {
            compatible = "zmk,behavior-tri-state";// requires tri-state PR #1366 (not yet merged into main)
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings =
                <&kt LCMD>,
                <&kp TAB>,
                <&kt LCMD>;

            ignored-key-positions = <0 3 7 9 16 17 18 28 29>;// Tab, Shift, Arrow key positions and DEL/BSPC to quit app/close window from altTab
        };
        wswapper: windows_swapper {
            compatible = "zmk,behavior-tri-state";// requires tri-state PR #1366 (not yet merged into main)
            label = "WINDOWS_SWAPPER";
            #binding-cells = <0>;
            bindings =
                <&kt LALT>,
                <&kp TAB>,
                <&kt LALT>;

            ignored-key-positions = <3>;// Shift key on WNAV to allow for backwards movement
        };
    };

    macros {
        lc_nav: lc_nav {
            label = "LC_NAV";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo NAV>,
                <&macro_tap>,
                <&kp K_CANCEL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo NAV>;
        };
        lc_sym: lc_sym {
            label = "LC_SYM";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo SYM>,
                <&macro_tap>,
                <&kp K_CANCEL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo SYM>;
        };
        lc_wnav: lc_wnav {
            label = "LC_WNAV";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo WNAV>,
                <&macro_tap>,
                <&kp K_CANCEL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo WNAV>;
        };
        lc_wsym: lc_wsym {
            label = "LC_WSYM";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo WSYM>,
                <&macro_tap>,
                <&kp K_CANCEL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo WSYM>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        macos_tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };

        windows_tri_layer {
            if-layers = <5 6>;
            then-layer = <7>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        apple_default_layer {
            bindings = <
                &kp Q       &kp W  &kp E  &kp R    &kp T        &kp Y      &kp U    &kp I      &kp O    &kp P
                &kp A       &kp S  &kp D  &kp F    &kp G        &kp H      &kp J    &kp K      &kp L    &kp SQT
                &mt CAPS Z  &kp X  &kp C  &kp V    &kp B        &kp N      &kp M    &kp COMMA  &kp DOT  &kp SEMI
                                          &lc_nav  &shift_cw    &kp SPACE  &lc_sym
            >;
        };

        apple_navigation_and_media_layer {
            bindings = <
                &kp TAB         &swapper   &kp LS(LC(TAB))  &kp LC(TAB)  &kp C_VOL_UP        &kp PG_UP  &kp HOME      &kp UP        &kp END    &kp BSPC
                &sk LCTRL       &sk LALT   &sk LSHFT        &sk LGUI     &kp C_VOL_DN        &kp PG_DN  &kp LEFT      &kp DOWN      &kp RIGHT  &kp ENTER
                &mt CAPS LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &kp C_PLAY_PAUSE    &nextprev  &kp LG(LBKT)  &kp LG(RBKT)  &none      &kp DEL
                                                            &trans       &trans              &trans     &trans
            >;
        };

        apple_symbols_layer {
            bindings = <
                &kp ESC    &kp LBRC   &kp LBKT   &kp LPAR   &kp TILDE    &kp CARET   &kp RPAR  &kp RBKT   &kp RBRC   &kp GRAVE
                &kp MINUS  &kp ASTRK  &kp EQUAL  &kp UNDER  &kp DLLR     &kp HASH    &sk RGUI  &sk RSHFT  &sk RALT   &sk RCTRL
                &kp PLUS   &kp PIPE   &kp AT     &kp FSLH   &kp PRCNT    &kp LA(N6)  &kp BSLH  &kp AMPS   &kp QMARK  &kp EXCL
                                                &trans     &trans       &trans      &trans
            >;
        };

        apple_tri_layer_function_and_number_row {
            bindings = <
                &kp N1     &kp N2    &kp N3     &kp N4    &kp N5     &kp N6   &kp N7    &kp N8     &kp N9    &kp N0
                &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11    &kp F12  &sk RGUI  &sk RSHFT  &sk RALT  &sk RCTRL
                &kp F1     &kp F2    &kp F3     &kp F4    &kp F5     &kp F6   &kp F7    &kp F8     &kp F9    &kp F10
                                                &trans    &trans     &trans   &trans
            >;
        };

        windows_default_layer {
            bindings = <
                &kp Q  &kp W  &kp E  &kp R     &kp T        &kp Y    &kp U     &kp I      &kp O    &kp P
                &kp A  &kp S  &kp D  &kp F     &kp G        &kp H    &kp J     &kp K      &kp L    &kp SQT
                &kp Z  &kp X  &kp C  &kp V     &kp B        &kp N    &kp M     &kp COMMA  &kp DOT  &kp SEMI
                                    &lc_wnav  &shift_cw    &kp SPC  &lc_wsym
            >;
        };

        windows_navigation_and_media_layer {
            bindings = <
                &kp TAB    &wswapper  &kp LS(LC(TAB))  &kp LC(TAB)  &kp C_VOL_UP        &kp PG_UP  &kp HOME      &kp UP         &kp END    &kp BSPC
                &sk LGUI   &sk LALT   &sk LSHFT        &sk LCTRL    &kp C_VOL_DN        &kp PG_DN  &kp LEFT      &kp DOWN       &kp RIGHT  &kp ENTER
                &kp LC(Z)  &kp LC(X)  &kp LC(C)        &kp LC(V)    &kp C_PLAY_PAUSE    &nextprev  &kp LA(LEFT)  &kp LA(RIGHT)  &kp GRAVE  &kp DEL
                                                    &trans       &trans              &trans     &trans
            >;
        };

        windows_symbols_layer {
            bindings = <
                &kp ESC    &kp LBRC   &kp LBKT   &kp LPAR  &kp TILDE    &kp CARET  &kp RPAR   &kp RBKT   &kp RBRC   &kp GRAVE
                &kp MINUS  &kp ASTRK  &kp EQUAL  &kp PLUS  &kp DLLR     &kp HASH   &sk RCTRL  &sk RSHFT  &sk RALT   &sk RGUI
                &kp UNDER  &kp PIPE   &kp AT     &kp FSLH  &kp PRCNT    &none      &kp BSLH   &kp AMPS   &kp QMARK  &kp EXCL
                                                &trans    &trans       &trans     &trans
            >;
        };

        windows_tri_layer_function_and_number_row {
            bindings = <
                &kp N1    &kp N2    &kp N3     &kp N4     &kp N5     &kp N6   &kp N7     &kp N8     &kp N9    &kp N0
                &sk LGUI  &sk LALT  &sk LSHFT  &sk LCTRL  &kp F11    &kp F12  &sk RCTRL  &sk RSHFT  &sk RALT  &sk RGUI
                &kp F1    &kp F2    &kp F3     &kp F4     &kp F5     &kp F6   &kp F7     &kp F8     &kp F9    &kp F10
                                            &trans     &trans     &trans   &trans
            >;
        };
    };
};
